//----------------------------------------------------------------//
// ===== UserSimK0n.cpp =====
// sample program to reconstruct pi S event
// from simulation data and CDC-tracking file generated by "UserSimDatG4.cpp (exe-file = sim)"
// *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
// reconstruction mathod is based on "EventAnalysis_K0n_sakuma.cpp"
//----------------------------------------------------------------//
//  exe-file: simK0n [./simK0n $(ConfFile) $(OutFile) $(InFile) $(CDCtrackingFile)]
//  input : conf-file, G4(knucl4.10)-file, CDC-tracking-file
//  output: when $(OutFile) is "tmp.root", the following 2 files are generated.
//     "tmp.root":      histogram file
//     "tmp_K0n.root": basic information of K0n event is listed up in TTree 
//  *NOTE*: the same conf-file used to generate G4-file is needed
//----------------------------------------------------------------//
//  updated by F.S, 2016 12/28
//----------------------------------------------------------------//

#include "KnuclRootData.h"
#include "ConfMan.h"
#include "SimDataMan.h"
#include "BeamLineTrackMan.h"
#include "CDSTrackingMan.h"
#include "TrackTools.h"
#include "EventHeader.h"
#include "Tools.h"
#include "ELossTools.h"

#include <TDatabasePDG.h>
#include <KinFitter/TKinFitter.h>
#include <KinFitter/TFitParticlePxPyPz.h>
#include <KinFitter/TFitConstraintM.h>
#include <KinFitter/TFitConstraintEp.h>
#include <Math/ProbFuncMathCore.h>

#define KFDEBUG 0 // verbose level of the KinFitter
// 0: quiet, 1: print result, 2: print iterations, 3: print also matrices

//-- set run# --//
const std::string GRUN = "62";

const double MOM_RES = 2.0; // MeV/c
// momentum resolution of the beam-line spectrometer
// was evaluated to be 2.0 +/- 0.5 MeV/c (Hashimoto-D p.58)

//** cut parameters **//
//@@ only different cut parameters btw Sada & Yamaga are listed @@//
double PARA_blc2bpc_dx_MIN;
double PARA_blc2bpc_dx_MAX;
double PARA_blc2bpc_dy_MIN;
double PARA_blc2bpc_dy_MAX;
double PARA_blc2bpc_dxdz_MIN;
double PARA_blc2bpc_dxdz_MAX;
double PARA_blc2bpc_dydz_MIN;
double PARA_blc2bpc_dydz_MAX;
double PARA_lnL_MAX;
double PARA_MM_LP_MIN;
double PARA_MM_LP_MAX;

const double TDC_CDH_MAX = 20; // ns
const double ADC_CDH_MIN = 1;  // MeV

//= = = = K0n final-sample tree = = = =//
TLorentzVector mom_beam;   // 4-momentum(beam)
TLorentzVector mom_target; // 4-momentum(target)
TLorentzVector mom_pip;    // 4-momentum(pi+)
TLorentzVector mom_pim;    // 4-momentum(pi-)
TLorentzVector mom_n;      // 4-momentum(missing neutron)
TVector3 vtx_reaction; // vertex(reaction)
TVector3 vtx_K0decay;  // vertex(K0 decay)
int run_num;   // run number
int event_num; // event number
int block_num; // block number
TLorentzVector mcmom_beam;   // generated 4-momentum(beam)
TLorentzVector mcmom_pip;    // generated 4-momentum(pi+)
TLorentzVector mcmom_pim;    // generated 4-momentum(pi-)
TLorentzVector mcmom_n;      // generated 4-momentum(missing neutron)
TLorentzVector kfmom_beam;   // 4-momentum(beam) after kinematical refit for K0 n
TLorentzVector kfmom_pip;    // 4-momentum(pi+) after kinematical refit for K0 n
TLorentzVector kfmom_pim;    // 4-momentum(pi-) after kinematical refit for K0 n
TLorentzVector kfmom_n;      // 4-momentum(missing neutron) after kinematical refit for K0 n
double kf_chi2;   // chi2 of kinematical refit
double kf_NDF;    // NDF of kinematical refit
double kf_status; // status of kinematical refit -> details can be found in this code
double kf_pvalue; // p-value of kinematical refit
int kf_flag; // flag of correct pair reconstruction, etc
//= = = = K0n final-sample tree = = = =//



using namespace std;

int main( int argc, char** argv )
{
  if( argc!=5 ){
    cout<<argv[0]<<" $(ConfFile) $(OutFile) $(KnuclFile) $(CDCtrackingFile)"<<endl;
    return 0;
  }

  TDatabasePDG *pdg = new TDatabasePDG();
  pdg->ReadPDGTable("pdg_table.txt");

  //-----------------------------------------//
  //--- covariance matrices for KinFitter ---//
  //-----------------------------------------//
  // ### obtained from (p_meas[j]-p_gene[j])
  // ###  using G4-data with TH1F(Form("cov_%d_%d_%d", i, j, j), 100, -cov_MAX, cov_MAX);
  // ###  and evaluated using "Air" Dora MC
  // K- p -> K0 n
  // TLorentzVector L3_beam, (L_pip+L_pim), L_pip, L_pim, L_n
  const double covVal[5][16] = {
#if 0 // res = 150
    { 1.86103e-05, 0, 0, 0,
      0, 1.94905e-05, 0, 0,
      0, 0, 3.89593e-06, 0,
      0, 0, 0, 3.13614e-06 },
    { 4.09477e-05, 0, 0, 0,
      0, 4.03923e-05, 0, 0,
      0, 0, 5.36408e-05, 0,
      0, 0, 0, 7.87365e-05 },
    { 1.44704e-05, 0, 0, 0,
      0, 1.49402e-05, 0, 0,
      0, 0, 2.24269e-05, 0,
      0, 0, 0, 2.27217e-05 },
    { 1.45633e-05, 0, 0, 0,
      0, 1.40891e-05, 0, 0,
      0, 0, 2.27917e-05, 0,
      0, 0, 0, 2.24214e-05 },
    { 5.99362e-05, 0, 0, 0,
      0, 6.014e-05, 0, 0,
      0, 0, 5.48676e-05, 0,
      0, 0, 0, 2.62837e-05 }
#else // res = 180
    { 1.94635e-05, 0, 0, 0,
      0, 1.99819e-05, 0, 0,
      0, 0, 3.94985e-06, 0,
      0, 0, 0, 3.20421e-06 },
    { 4.99273e-05, 0, 0, 0,
      0, 4.89668e-05, 0, 0,
      0, 0, 7.13516e-05, 0,
      0, 0, 0, 9.45532e-05 },
    { 1.55595e-05, 0, 0, 0,
      0, 1.58839e-05, 0, 0,
      0, 0, 2.79391e-05, 0,
      0, 0, 0, 2.76598e-05 },
    { 1.61875e-05, 0, 0, 0,
      0, 1.63685e-05, 0, 0,
      0, 0, 2.97896e-05, 0,
      0, 0, 0, 2.68447e-05 },
    { 6.81644e-05, 0, 0, 0,
      0, 6.79624e-05, 0, 0,
      0, 0, 7.10999e-05, 0,
      0, 0, 0, 3.33771e-05 }
#endif
  };

  TMatrixD *covZero = new TMatrixD(4, 4);
  covZero->Zero();
  covZero->ResizeTo(3, 3); // resize from 4x4 to 3x3
  TMatrixD *covParticle[5];
  for( int i=0; i<5; i++ ){
    covParticle[i] = new TMatrixD(4, 4);
    int n = 0;
    for( int j=0; j<4; j++ ){
      for( int k=0; k<4; k++ ){
	if( j==k ){
	  (*covParticle[i])[j][k] = covVal[i][n]; // only diagonal elements
	} else{
	  (*covParticle[i])[j][k] = 0;
	}
	n++;
      }
    }
    covParticle[i]->ResizeTo(3, 3); // resize from 4x4 to 3x3
    covParticle[i]->Print(); // Print all
  }
  //-----------------------------------------//
  //--- covariance matrices for KinFitter ---//
  //-----------------------------------------//


  //** Conf file open **// 
  ConfMan *confMan = new ConfMan(argv[1]);
  confMan->Initialize();

  //** Simulation file open **// 
  SimDataMan *simMan = new SimDataMan();
  TFile *simfile = new TFile(argv[3]);
  TTree *tree2 = (TTree*)simfile->Get("tree2");
  RunHeaderMC *runHeader=0;
  tree2->SetBranchAddress("RunHeaderMC", &runHeader);
  if( tree2->GetEntries()==1 ) cout<<"  !!! tree2 entries==1 !!!"<<endl;
  else tree2->GetEntry(0);

  TTree *tree=(TTree*)simfile->Get("tree");
  EventHeaderMC *evHeaderMC = new EventHeaderMC();
  DetectorData  *detData  = new DetectorData();
  ReactionData  *reacData = new ReactionData();
  MCData        *mcData   = new MCData();
  tree->SetBranchAddress("EventHeaderMC", &evHeaderMC);
  tree->SetBranchAddress("DetectorData", &detData);
  tree->SetBranchAddress("ReactionData", &reacData);
  tree->SetBranchAddress("MCData", &mcData);

  //** Getting CDSTracking info. from CDCfile **//
  TFile *cdcfile = new TFile(argv[4]);
  TTree *evTree  = (TTree*)cdcfile->Get("EventTree");
  EventHeader      *header = new EventHeader();
  evTree->SetBranchAddress("EventHeader", &header );
  CDSHitMan        *cdsMan = new CDSHitMan();
  BeamLineHitMan   *blMan  = new BeamLineHitMan();
  BeamLineTrackMan *bltrackMan  = new BeamLineTrackMan();
  CDSTrackingMan   *cdstrackMan = new CDSTrackingMan();
  evTree->SetBranchAddress("CDSTrackingMan", &cdstrackMan);

  //** output file 1 : histograms **//
  TFile *outfile = new TFile(argv[2], "recreate");
  outfile->cd();

  //** output file 2 : K0n final-sample tree **// 
  std::string outfile2_name = string(argv[2]);
  outfile2_name.insert( outfile2_name.size()-5, "_K0n" );
  std::cout<<"K0n file "<<outfile2_name<<std::endl;
  TFile *outfile2 = new TFile( outfile2_name.c_str(), "recreate" );
  outfile2->cd();
  TTree *K0nTree = new TTree( "EventTree", "EventTree" );
  K0nTree->Branch( "mom_beam",   &mom_beam );
  K0nTree->Branch( "mom_target", &mom_target );
  K0nTree->Branch( "mom_pip", &mom_pip );
  K0nTree->Branch( "mom_pim", &mom_pim );
  K0nTree->Branch( "mom_n", &mom_n );
  K0nTree->Branch( "vtx_reaction", &vtx_reaction );
  K0nTree->Branch( "vtx_K0decay", &vtx_K0decay );
  K0nTree->Branch( "run_num", &run_num );
  K0nTree->Branch( "event_num", &event_num );
  K0nTree->Branch( "block_num", &block_num );
  K0nTree->Branch( "mcmom_beam",   &mcmom_beam );
  K0nTree->Branch( "mcmom_pip", &mcmom_pip );
  K0nTree->Branch( "mcmom_pim", &mcmom_pim );
  K0nTree->Branch( "mcmom_n", &mcmom_n );
  K0nTree->Branch( "kfmom_beam",   &kfmom_beam );
  K0nTree->Branch( "kfmom_pip", &kfmom_pip );
  K0nTree->Branch( "kfmom_pim", &kfmom_pim );
  K0nTree->Branch( "kfmom_n", &kfmom_n );
  K0nTree->Branch( "kf_chi2", &kf_chi2 );
  K0nTree->Branch( "kf_NDF", &kf_NDF );
  K0nTree->Branch( "kf_status", &kf_status );
  K0nTree->Branch( "kf_pvalue", &kf_pvalue );
  K0nTree->Branch( "kf_flag", &kf_flag );
  outfile->cd();


  if( evTree->GetEntries()!=tree->GetEntries() ){
    std::cout<<"  !!! TTree entries don't match !!!"<<std::endl;
    //return 0;
  }


  //=== definitino of histograms ===//
  //** gneneral informantion **//
  Tools::newTH1F( Form("Time"), 3000, -0.5, 2999.5 );
  Tools::newTH1F( Form("EventCheck"), 20, 0, 20 );
  Tools::newTH1F( Form("Scaler"), 41, -0.5, 40.5 );

  //** CDC and CDH information from CDC-trackig file **//
  Tools::newTH1F( Form("nGoodTrack"), 11, -0.5, 10.5 );
  Tools::newTH1F( Form("mul_CDH"), 11, -0.5, 10.5 );
  Tools::newTH1F( Form("mul_CDHc"), 11, -0.5, 10.5 );

  //** beam line **//
  Tools::newTH1F( Form("mul_BHD"), 12, -0.5, 11.5 );
  Tools::newTH1F( Form("mul_T0"),   6, -0.5, 5.5 );
  Tools::newTH1F( Form("tof_T0BHD"), 2000, 20, 40 );
  Tools::newTH1F( Form("tracktime_BPC"),  1200, -200, 400 );
  Tools::newTH1F( Form("trackchi2_BPC"),  200, 0, 20 );
  Tools::newTH1F( Form("ntrack_BPC"),  6, -0.5, 5.5 );
  Tools::newTH1F( Form("tracktime_BLC1"), 1200, -200, 400 );
  Tools::newTH1F( Form("tracktime_BLC2"), 1200, -200, 400 );
  Tools::newTH1F( Form("trackchi2_BLC1"), 200, 0, 20 );
  Tools::newTH1F( Form("trackchi2_BLC2"), 200, 0, 20 );
  Tools::newTH1F( Form("ntrack_BLC1"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_BLC2"), 6, -0.5, 5.5 );
  Tools::newTH2F( Form("dydx_BLC2BPC"),     130, -1.3, 1.3, 130, -1.3, 1.3 );
  Tools::newTH2F( Form("dydzdxdz_BLC2BPC"), 175, -0.035, 0.035, 175, -0.035, 0.035 );
  Tools::newTH1F( Form("trackchi2_beam"), 400, 0, 40 );
  Tools::newTH1F( Form("momentum_beam"), 180, 0.92, 1.10 );

  //** CDS **//
  Tools::newTH1F( Form("trackchi2_CDC"), 1000, 0, 50 );
  Tools::newTH2F( Form("PID_CDS_beta"), 1000, 0, 5, 1000, -1.2, 1.2 );
  Tools::newTH2F( Form("PID_CDS"), 1000, -0.6, 5, 1000, -1.2, 1.2 );
  Tools::newTH1F( Form("ntrack_CDS"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_pi_plus"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_proton"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_deuteron"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_pi_minus"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_K_minus"), 6, -0.5, 5.5 );

  //** forward counters **//
  Tools::newTH1F( Form("mul_BVC"), 9, -0.5, 8.5 );
  Tools::newTH1F( Form("mul_CVC"), 11, -0.5, 10.5 );
  Tools::newTH1F( Form("mul_PC"), 11, -0.5, 10.5 );

  //** pi pi X event **//
  Tools::newTH2F( Form("MMpipi_IMpipi"), 100, 0.4, 0.6, 100, 0.5, 1.5 );
  Tools::newTH2F( Form("Cosn_IMpipi"),   100, 0.4, 0.6, 100, -1, 1 );

#if 1
  //*** for kinematical fit ***//
  // beam_K(K+), Sigma+/-, missing-pi, n from S, pi+/- from S
  // !!! only diagonal components !!!
  const int BIN = 100;
  double cov_MAX;
  for( int i=0; i<5; i++ ){
    for( int j=0; j<4; j++ ){
      for( int k=0; k<4; k++ ){
	if( i==0 || i==4 ) // K-, pi
	  cov_MAX = 0.02;
	else // Sigma, pi_miss, n
	  cov_MAX = 0.1;
	Tools::newTH1F(Form("cov_%d_%d_%d", i, j, k), BIN, -cov_MAX, cov_MAX);
      }
    }
  }
#endif
  Tools::newTH1F( Form("KFchi2"), 100, 0, 100 );
  Tools::newTH1F( Form("KF_decision"), 2, -0.5, 1.5 );

  int eventn = tree->GetEntries();
  int stopn  = confMan->GetStopEvNum();
  int exen   = ( 0<stopn && stopn<eventn ) ? stopn : eventn;

  cout<<"===== Lambda p n reconstruction in MC START ============="<<endl;
  cout<<"     # of All  Event in EventTree:     "<<eventn<<endl;
  cout<<"     # of Stop Event in analyzer.conf: "<<stopn<<endl;
  cout<<"     # of Exe  Event in this program:  "<<exen<<endl;
  cout<<"========================================================="<<endl;

  //** set cut parameters **//
  if ( GRUN=="62" ){ // same as Run65 [20180524]
    //** from Yamaga:MyAnalysisBL.cpp **//
    PARA_blc2bpc_dx_MIN = -0.75;
    PARA_blc2bpc_dx_MAX = 0.75;
    PARA_blc2bpc_dy_MIN = -0.75;
    PARA_blc2bpc_dy_MAX = 0.75;
    PARA_blc2bpc_dxdz_MIN = -0.02;
    PARA_blc2bpc_dxdz_MAX = 0.02;
    PARA_blc2bpc_dydz_MIN = -0.02;
    PARA_blc2bpc_dydz_MAX = 0.02;
  }else{
    std::cerr<<" !!! pleas set paramter::GRUN in EventAnalysis_Lpn_sakuma.cpp => 49c or 65 !!!"<<std::endl;
    return 0;
  }

  //=== counter ===//
  int AllGoodTrack = 0;
  int nTrack       = 0;
  int nTrack_PID   = 0;
  int nEvent_Lp    = 0;
  int nEvent_Lpn   = 0;

  int nG4Event_K0n   = 0;

  int nAbort_nGoodTrack = 0;
  int nAbort_nCDH = 0;
  int nAbort_nT0 = 0;
  int nAbort_nbpc = 0;
  int nAbort_bpctrack = 0;
  int nAbort_nblc2 = 0;
  int nAbort_fblc2bpc = 0;
  int nAbort_flagbmom = 0;
  int nAbort_ftarget = 0;
  int nAbort_pipi = 0;
  int nAbort_end = 0;

  int nFill_pipi = 0;
  int nFill_K0n = 0;

  int nTrack_CDHshare = 0;

  int ev_cdc = 0;

  //=== event loop ===//
  for( int ev=0; ev<exen; ev++ ){
#if 1
    if( /*ev<100 ||*/ ev%100==0 ) std::cout<<"> Event Number "<<ev<<std::endl;
#else
    std::cout<<"> Event Number "<<ev<<std::endl;
    if( ev == 1000 ) break;
#endif

    Tools::Fill1D( Form("EventCheck"), 1 );

    cdsMan->Clear();
    blMan->Clear();
    bltrackMan->Clear();

    tree->GetEntry(ev); // MC
    evTree->GetEntry(ev_cdc); // CDC-tracking
    
    //### event ID matching
    if( evHeaderMC->eventID()!=header->ev() ){
      continue;
    }
    ev_cdc++;


    //### CDH ADC cut ###//
    DetectorData *detData2  = new DetectorData();
    for( int i=0; i<detData->detectorHitSize(); i++ ){
      if( !(detData->detectorHit(i)->detectorID()==CID_CDH && detData->detectorHit(i)->adc()<ADC_CDH_MIN) ){
	detData2->setDetectorHit(*detData->detectorHit(i));
      }
    }


    simMan->Convert(detData2, confMan, blMan, cdsMan);
    cdstrackMan->Calc(cdsMan, confMan, true);
    bltrackMan->DoTracking(blMan, confMan, true, true);


    //##########################//
    //### get G4 information ###//
    //##########################//
    bool flagG4Decay = false;
    bool K0n_detect = false;
    //std::cerr<<"======================"<<std::endl;
    //for( int j=0; j<reacData->ParticleSize(); j++ ){
    //std::cerr<<j<<" "<<reacData->PDG(j)<<" "<<reacData->GetParticle(j).P()<<std::endl;
    //}
    int reactionID = reacData->ReactionID();
    // TLorentzVector L3_beam, (L_pip+L_pim), L_pip, L_pim, L_n
    //const int PDG[5] = {321, -311, 211, -211, 2112}; // K0bar
    const int PDG[5] = {321, 310, 211, -211, 2112}; // K0S
    int parentID[5] = {0, -1, -1, -1, 0};
    int ID[5]       = {-1, -1, -1, -1, -1};
    int trackID[5]  = {-1, -1, -1, -1, -1};
    int nparticle = 0;
    for( int j=0; j<mcData->trackSize(); j++ ){
      int pdgcode = mcData->track(j)->pdgID();
      int parent  = mcData->track(j)->parentTrackID();
      int track   = mcData->track(j)->trackID();
      //cerr<<j<<" | "<<pdgcode<<" "<<parent<<" "<<track<<endl;
      if( pdgcode==-311 ) parentID[1] = track; // for K0bar -> K0S/K0L
      for( int k=0; k<5; k++ ){
	if( pdgcode==PDG[k] && parent==parentID[k] && ID[k]==-1 ){
	  ID[k] = j;
	  trackID[k] = track;
	  nparticle++;
	  //cerr<<j<<","<<k<<" | "<<pdgcode<<" "<<parent<<" "<<track<<endl;
	  if( k==1 ){
	    parentID[2] = track;
	    parentID[3] = track;
	  }
	  break;
	}
      }
    }
    //cerr<<" nparticle = "<<nparticle<<endl;
    if( nparticle==5 ) flagG4Decay = true;

    int nCDHhit[5] = {0, 0, 0, 0, 0};
    if( flagG4Decay ){ // Y -> N pi decay
      for( int j=0; j<detData2->detectorHitSize(); j++ ){
	int cid    = detData2->detectorHit(j)->detectorID();
	int track  = detData2->detectorHit(j)->trackID();
	for( int k=2; k<5; k++ ){
	  if( cid==CID_CDH && track==trackID[k] ) nCDHhit[k]++;
	}
      }
    }
    if( nCDHhit[2] && nCDHhit[3] ){
      K0n_detect = true;
      nG4Event_K0n++;
    }
#if 0
    for( int k=0; k<5; k++ ) std::cerr<<nCDHhit[k]<<" ";
    std::cerr<<std::endl;
    if( K0n_detect ){
      std::cerr<<" !!! K0n_detect !!! "<<std::endl;
      //getchar();
    }
#endif
#if 0
    else{
      continue;
    }
#endif

    
#if 1
    //*** for kinematical fit ***//
    // TLorentzVector L3_beam, (L_pip+L_pim), L_pip, L_pim, L_n
    TLorentzVector TL_gene[5]; // generated
    for( int i=0; i<5; i++ ){
      if( i ) TL_gene[i].SetVectM(mcData->track(ID[i])->momentum()*0.001,  pdg->GetParticle(PDG[i])->Mass()); // GeV
      else    TL_gene[i].SetVectM(mcData->track(ID[i])->momentum()*-0.001, pdg->GetParticle(PDG[i])->Mass()); // GeV
    }
#endif
    //##########################//
    //### get G4 information ###//
    //##########################//


    //=======================================//
    //=== from EventAnalysis_Lpn_sada.cpp ===//
    //=======================================//
    int nGoodTrack = cdstrackMan->nGoodTrack();
    int nallTrack  = cdstrackMan->nTrack();
    AllGoodTrack += nGoodTrack;
    nTrack += nallTrack;
    Tools::Fill1D( Form("nGoodTrack"), nGoodTrack );

    if( nGoodTrack!=2 ){ // dedicated for K0 n event
      nAbort_nGoodTrack++;
      continue;
    }

    //** # of CDH-hits cut **// 
    int nCDH = 0;
    for( int i=0; i<cdsMan->nCDH(); i++ ){
      //if( cdsMan->CDH(i)->CheckRange() ){
      if( cdsMan->CDH(i)->CheckRange() && cdsMan->CDH(i)->ctmean()<TDC_CDH_MAX ){
	nCDH++;
      }
    }
    Tools::Fill1D( Form("mul_CDH"), nCDH );
    if( nCDH!=2 ){ //** only 2 hits events **//
      nAbort_nCDH++;
      continue;
    }

    //** T0 = 1hit selection **//
    int nT0 = 0;
    for( int i=0; i<blMan->nT0(); i++ ){
      HodoscopeLikeHit *hit = blMan->T0(i);
      if( hit->CheckRange() ) nT0++;
    }
    Tools::Fill1D( Form("mul_T0"),  nT0 );
    if( nT0!=1 ){ 
      nAbort_nT0++;
      continue;
    }

    //** Beam PID **//
    double ctmT0 = 0;
    for( int i=0; i<blMan->nT0(); i++ ){
      if( blMan->T0(i)->CheckRange() ){
	ctmT0 = blMan->T0(i)->ctmean();
      }
    }
    int pid_beam = 0; //0:K 1:pi 3:else

    //** BPC track selection **//
    int nbpc = 0;
    int bpcid = -1;
    for( int i=0; i<bltrackMan->ntrackBPC(); i++ ){
      nbpc++;
      bpcid = i;
    }
    Tools::Fill1D( Form("ntrack_BPC"), nbpc );
    if( nbpc!=1 ){
      nAbort_nbpc++;
      continue;
    }
    LocalTrack *bpctrack = bltrackMan->trackBPC(bpcid);    
    if( bpctrack->chi2all()>10 ){
      nAbort_bpctrack++;
      continue;
    }

    //** vertex calculation **//
    for( int it1=0; it1<cdstrackMan->nGoodTrack(); it1++ ){
      cdstrackMan->CalcVertex_beam(cdstrackMan->GoodTrackID(it1), bltrackMan, confMan);
    }


    //** vectors for PID container **//
    std::vector <int> pip_ID;
    std::vector <int> pim_ID;
    std::vector <int> km_ID;
    std::vector <int> p_ID;
    std::vector <int> d_ID;
    
    std::vector <int> vCDHseg;

    bool flagbmom = false;
    TVector3 vtx_react;

    //** BLC2 track **//
    int nblc2 = 0;
    int blc2id = -1;
    for( int i=0; i<bltrackMan->ntrackBLC2(); i++ ){
      nblc2++;
      if( bltrackMan->trackBLC2(i)->chi2all()<10 ) blc2id = i;
    }
    Tools::Fill1D( Form("ntrack_BLC2"), nblc2 );
    if( !(nblc2==1 && blc2id!=-1) ){
      nAbort_nblc2++;
      continue;
    }

    //### BLC2-BPC position matching
    bool fblc2bpc = false;
    for( int ii=0; ii<bltrackMan->ntrackBLC2(); ii++ ){
      if( ii!=blc2id ) continue;
      LocalTrack *blc2 = bltrackMan->trackBLC2(ii);
      double xblc2bpc[2], yblc2bpc[2];
      double xmom[2], ymom[2];

      TVector3 Pos_BPC, Pos_BLC2, tmp;
      confMan->GetBLDCWireMapManager()->GetGParam( CID_BPC, Pos_BPC, tmp );
      confMan->GetBLDCWireMapManager()->GetGParam( CID_BLC2a, Pos_BLC2, tmp );
      double zPos_BPC = Pos_BPC.Z();
      double zPos_BLC2 = Pos_BLC2.Z();
      double zPos_BPC_BLC2 = (Pos_BPC.Z()+Pos_BLC2.Z())/2;

      bpctrack->XYPosatZ( zPos_BPC_BLC2, xblc2bpc[0], yblc2bpc[0] );
      bpctrack->XYPosatZ( zPos_BPC, xmom[0], ymom[0] );
      blc2->XYPosatZ( zPos_BPC_BLC2, xblc2bpc[1], yblc2bpc[1]);
      blc2->XYPosatZ( zPos_BLC2, xmom[1], ymom[1]);
      double dxdz[2], dydz[2];
      dxdz[0] = (xmom[0]-xblc2bpc[0]) / (zPos_BPC-zPos_BPC_BLC2);
      dxdz[1] = (xmom[1]-xblc2bpc[1]) / (zPos_BLC2-zPos_BPC_BLC2);
      dydz[0] = (ymom[0]-yblc2bpc[0]) / (zPos_BPC-zPos_BPC_BLC2);
      dydz[1] = (ymom[1]-yblc2bpc[1]) / (zPos_BLC2-zPos_BPC_BLC2);

      if(      (xblc2bpc[1]-xblc2bpc[0])<PARA_blc2bpc_dx_MIN ||
	       (xblc2bpc[1]-xblc2bpc[0])>PARA_blc2bpc_dx_MAX ) fblc2bpc = false;
      else if( (yblc2bpc[1]-yblc2bpc[0])<PARA_blc2bpc_dy_MIN ||
	       (yblc2bpc[1]-yblc2bpc[0])>PARA_blc2bpc_dy_MAX ) fblc2bpc = false;
      else if( (dxdz[1]-dxdz[0])<PARA_blc2bpc_dxdz_MIN ||
	       (dxdz[1]-dxdz[0])>PARA_blc2bpc_dxdz_MAX ) fblc2bpc = false;
      else if( (dydz[1]-dydz[0])<PARA_blc2bpc_dydz_MIN ||
	       (dydz[1]-dydz[0])>PARA_blc2bpc_dydz_MAX ) fblc2bpc = false;
      else fblc2bpc = true;

      Tools::Fill2D( Form("dydx_BLC2BPC"), xblc2bpc[1]-xblc2bpc[0], yblc2bpc[1]-yblc2bpc[0] );
      Tools::Fill2D( Form("dydzdxdz_BLC2BPC"), dxdz[1]-dxdz[0], dydz[1]-dydz[0] );
    }

    if( !fblc2bpc ){
      nAbort_fblc2bpc++;
      continue;
    }

    //** beam momentum calculation **//
    TLorentzVector L3_beambf;  // 4-Momentum(beam) in LAB
    TLorentzVector L3_beam;    // 4-Momentum(beam) in LAB with dE correcion
    TLorentzVector L3_target;  // 4-Momentum(He3-target) in LAB
    TLorentzVector L3_beambfCM;  // 4-Momentum(beam) in CM
    TLorentzVector L3_beamCM;    // 4-Momentum(beam) in CM with dE correcion
    TLorentzVector L3_targetCM;  // 4-Momentum(He3-target) in CM

    TVector3 Pos_T0;
    confMan->GetGeomMapManager()->GetPos( CID_T0, 0, Pos_T0 );
    double zPos_T0 = Pos_T0.Z();

    double beammom = 0;
    for( int j=0; j<mcData->trackSize(); j++ ){
      int pdgcode = mcData->track(j)->pdgID();
      int parent  = mcData->track(j)->parentTrackID();
      if( pdgcode==321 && parent==0 ){
	beammom = (mcData->track(j)->momentum().Mag()+gRandom->Gaus(0,MOM_RES))/1000.0;
	break;
      }
    }

    double x1, y1, x2, y2;
    double z1 = 0, z2 = 20;
    bpctrack->XYPosatZ(z1, x1, y1);
    bpctrack->XYPosatZ(z2, x2, y2);
    TVector3 ls;
    ls.SetXYZ(x2-x1, y2-y1, z2-z1);
    ls = ls.Unit();
    TVector3 Pp_beam = beammom*ls; 
    TVector3 Pp_target;
    Pp_target.SetXYZ(0, 0, 0);

    L3_beambf.SetVectM(Pp_beam , kpMass);
    L3_target.SetVectM(Pp_target, pMass);
    L3_beam = L3_beambf;
    TVector3 boost = (L3_target+L3_beam).BoostVector();
    L3_beambfCM = L3_beam;
    L3_targetCM = L3_target;
    L3_beambfCM.Boost(-1*boost);
    L3_targetCM.Boost(-1*boost);
    flagbmom = true;

    if( !flagbmom ){
      nAbort_flagbmom++;
      continue;
    }
    Tools::Fill1D( Form("momentum_beam"), L3_beambf.P() );

    //** + + + + + + + + + + + + **//
    //**  PID in CDS             **//
    //** + + + + + + + + + + + + **//

    int CDHseg;

    //** PID of CDS tracks **//
    for( int it=0; it<cdstrackMan->nGoodTrack(); it++ ){
      CDSTrack *track = cdstrackMan->Track(cdstrackMan->GoodTrackID(it));

      Tools::Fill1D( Form("trackchi2_CDC"), track->Chi() );

      if( track->Chi()>30 ) continue; 
      if( !track->CDHFlag() ) continue;

      double mom = track->Momentum();
      TVector3 vtxb1, vtxb2, vtxb;
      track->GetVertex( bpctrack->GetPosatZ(zPos_T0), bpctrack->GetMomDir(), vtxb1, vtxb2 );
      track->SetPID(-1);
      vtxb = (vtxb1+vtxb2)*0.5;

      double tof = 999.;
      double mass2 = -999.;
      for( int icdh=0; icdh<track->nCDHHit(); icdh++ ){
	HodoscopeLikeHit *cdhhit=track->CDHHit(cdsMan,icdh);
	double tmptof = cdhhit->ctmean() - ctmT0;      
	//cerr<<icdh<<": "<<cdhhit->ctmean()<<" - "<<ctmT0<<" = "<<tmptof<<endl;
	if( tmptof<tof || tof==999. ){ //*** apply minimum TOF hit ***//
	  tof = tmptof;
	  CDHseg = cdhhit->seg();
	}
      }
      //*************************************
      // In a CDH hit-shared event, only some one track is adopted and the others are discarded
      //*************************************

      bool CDHflag = true;
      for( int m=0; m<(int)vCDHseg.size(); m++ ){
	if( CDHseg==vCDHseg[m] ) CDHflag = false;
      }
      if( !CDHflag ){
	nTrack_CDHshare++;
	continue;
      }
      vCDHseg.push_back(CDHseg);

      //** calculation of beta and squared-mass **//
      double tmptof, beta_calc;
      if( !TrackTools::FindMass2( track, bpctrack, tof, L3_beam.Vect().Mag(),
				  pid_beam, beta_calc, mass2, tmptof ) ){
	std::cerr<<" !!! failure in PID_CDS [FindMass2()] !!! "<<std::endl;
	continue;
      }
      int pid = TrackTools::PIDcorr(mom,mass2);      
      track->SetPID(pid);
      Tools::Fill2D( "PID_CDS_beta", 1/beta_calc, mom );
      Tools::Fill2D( "PID_CDS", mass2, mom );

      //** energy loss calculation **//
      double tmpl;
      TVector3 vtx_beam, vtx_cds;
      if( !track->CalcVertexTimeLength(bpctrack->GetPosatZ(0), bpctrack->GetMomDir(), track->Mass(),
				       vtx_beam, vtx_cds, tmptof, tmpl, true) ){
	std::cerr<<" !!! failure in energy loss calculation [CalcVertexTimeLength()] !!! "<<std::endl;
	continue;
      }

      if( pid==CDS_PiMinus )
	pim_ID.push_back(cdstrackMan->GoodTrackID(it));
      else if( pid==CDS_PiPlus )
	pip_ID.push_back(cdstrackMan->GoodTrackID(it));
      else if( pid==CDS_Proton )
	p_ID.push_back(cdstrackMan->GoodTrackID(it));
      else if( pid==CDS_Deuteron )
	d_ID.push_back(cdstrackMan->GoodTrackID(it));
      else if( pid==CDS_Kaon )
	km_ID.push_back(cdstrackMan->GoodTrackID(it));
      
      if( pid<7 ) nTrack_PID++;

      //cerr<<"    pid = "<<pid<<", tof = "<<tmptof<<", beta = "<<beta_calc
      //<<", mom = "<<mom<<", mass = "<<sqrt(fabs(mass2))<<endl;

    }// for( int it=0; it<cdstrackMan->nGoodTrack(); it++ ){
    //** end of PID **//

    Tools::Fill1D( Form("ntrack_CDS"), pip_ID.size()+p_ID.size()+d_ID.size()+pim_ID.size()+km_ID.size() );
    Tools::Fill1D( Form("ntrack_pi_plus"),  pip_ID.size() );
    Tools::Fill1D( Form("ntrack_proton"),   p_ID.size() );
    Tools::Fill1D( Form("ntrack_deuteron"), d_ID.size() );
    Tools::Fill1D( Form("ntrack_pi_minus"), pim_ID.size() );
    Tools::Fill1D( Form("ntrack_K_minus"),  km_ID.size() );



    //** charge veto with BVC, CVC (TOF=CVC), & PC **//
    int nBVC = 0;
    int nCVC = 0;
    int nPC  = 0;
    for( int i=0; i<blMan->nBVC(); i++ ){
      if( blMan->BVC(i)->CheckRange() ) nBVC++;
    }
    for( int i=0; i<blMan->nTOF(); i++ ){
      if( blMan->TOF(i)->CheckRange() ) nCVC++;
    }
    for( int i=0; i<blMan->nPC(); i++ ){
      if( blMan->PC(i)->CheckRange() ) nPC++;
    }
    Tools::Fill1D( Form("mul_BVC"), nBVC );
    Tools::Fill1D( Form("mul_CVC"), nCVC );
    Tools::Fill1D( Form("mul_PC"),  nPC );
    bool chargedhit = false;
    if( nBVC || nCVC || nPC ) chargedhit = true;

#if 0
    //** find neighboring hits on CDH **//
    std::vector <int> nCDHseg;     // neutral hit candidates
    std::vector <int> CDHhit_list; // CDH hit container
    for( int n=0; n<cdsMan->nCDH(); n++ ){
      if( cdsMan->CDH(n)->CheckRange() && cdsMan->CDH(n)->ctmean()<TDC_CDH_MAX ){
        CDHhit_list.push_back( cdsMan->CDH(n)->seg() );
      }
    }
    std::sort(vCDHseg.begin(), vCDHseg.end());
    std::sort(CDHhit_list.begin(), CDHhit_list.end());
    std::set_difference( CDHhit_list.begin(), CDHhit_list.end(),
                         vCDHseg.begin(), vCDHseg.end(),
                         std::back_inserter(nCDHseg) );

    int nCDH_neighb = 0;
    for( int l=0; l<(int)nCDHseg.size(); l++ ){   // neutral hit candidates
      int flag_neighb = 0;
      for( int m=0; m<(int)vCDHseg.size(); m++ ){ // track associated hits
	if( abs(nCDHseg[l]-vCDHseg[m])==1 || abs(nCDHseg[l]-vCDHseg[m])==35 ) flag_neighb++;
      }
      if( flag_neighb ) nCDH_neighb++;
    }
    std::cerr<<"all   hits : ";
    for( int n=0; n<(int)CDHhit_list.size(); n++ ){
      std::cerr<<CDHhit_list[n]<<" ";
    } std::cerr<<std::endl;
    std::cerr<<"track hits : ";
    for( int n=0; n<(int)vCDHseg.size(); n++ ){
      std::cerr<<vCDHseg[n]<<" ";
    } std::cerr<<std::endl;
    std::cerr<<"diff  hits : ";
    for( int n=0; n<(int)nCDHseg.size(); n++ ){
      std::cerr<<nCDHseg[n]<<" ";
    } std::cerr<<std::endl;
    std::cerr<<" nCDH = "<<nCDH<<", nCDH_neighb = "<<nCDH_neighb<<std::endl;

    //** re-count CDH multiplicity **//
    int nCDHc = nCDH-nCDH_neighb;
#endif


    //** + + + + + + + + + + + **//
    //**  pi pi  X event  **//
    //** + + + + + + + + + + + **//
    if( flagbmom && cdstrackMan->nGoodTrack()==2 &&
	pim_ID.size()==1 && pip_ID.size()==1 && !chargedhit ){
      
      nFill_pipi++;
      
      //!!!!! at present stage, DCAs are not considered [20180618] !!!!!//
      TVector3 vtx_pip; // Vertex(pip-pim)_on_pip
      TVector3 vtx_pim; // Vertex(pip-pim)_on_pim
      TVector3 vtxreac; // Vertex(v(beam-K0))_center
      TVector3 P_pip; // Momentum(pi+)
      TVector3 P_pim; // Momentum(pi-)
      TVector3 P_K0;  // Momentum(K0)
      TLorentzVector L_pip;   // 4-Momentum(pi+)
      TLorentzVector L_pim;   // 4-Momentum(pi-)
      TLorentzVector L_n;     // 4-Momentum(n_missing)
      TLorentzVector mcL_pip;  // generated 4-Momentum(pi+)
      TLorentzVector mcL_pim;  // generated 4-Momentum(pi-)
      TLorentzVector mcL_n;    // generated 4-Momentum(n)

      // TLorentzVector L3_beam, (L_pip+L_pim), L_pip, L_pim, L_n
      TLorentzVector TL_meas[5]; // measured
      TLorentzVector TL_kfit[5]; // kinematical fitted

      //%%% set paramters %%%//
      CDSTrack *track_pip  = cdstrackMan->Track( pip_ID[0] );
      CDSTrack *track_pim  = cdstrackMan->Track( pim_ID[0] );

      //%%% calc pip - pim %%%//
      if( !TrackTools::Calc2HelixVertex( track_pip, track_pim, vtx_pip, vtx_pim ) ){
	std::cerr<<" !!! failure in vertex calculation [Calc2HelixVertex()] !!! "<<std::endl;
	continue;
      }
      vtx_K0decay = (vtx_pip+vtx_pim)*0.5;

      if( !track_pip->GetMomentum( vtx_pip, P_pip, true, true ) ){
	std::cerr<<" !!! failure in momentum calculation [GetMomentum()] !!! "<<std::endl;
	continue;
      }
      if( !track_pim->GetMomentum( vtx_pim, P_pim, true, true ) ){
	std::cerr<<" !!! failure in momentum calculation [GetMomentum()] !!! "<<std::endl;
	continue;
      }
      P_K0 = P_pip+P_pim;

      L_pip.SetVectM( P_pip, piMass );
      L_pim.SetVectM( P_pim, piMass );

      TVector3 lp; // beam positon @ z=0
      TVector3 ls; // beam direction
      double x1, y1, x2, y2;
      double z1 = 0, z2 = 20;
      bpctrack->XYPosatZ( z1, x1, y1 );               
      bpctrack->XYPosatZ( z2, x2, y2 );
      lp.SetXYZ( x1, y1, z1 );
      ls.SetXYZ( x2-x1, y2-y1, z2-z1 );
      ls = ls.Unit();

      double dist_K0, dltmp = 0;
      TVector3 vtx_reac_K0;   // Vertex(beam-(pip+pim))_on_(pip+pim)
      TVector3 vtx_reac_beam; // Vertex(beam-(pip+pim))_on_beam
      MathTools::LineToLine( vtx_K0decay, P_K0.Unit(), lp, ls, dltmp, dist_K0, vtx_reac_K0, vtx_reac_beam );
      vtx_react = 0.5*(vtx_reac_K0+vtx_reac_beam); // reaction vertex

      //** reconstructoin of missing neutorn **//
      double mm_mass = (L3_target+L3_beam-L_pip-L_pim).M();
      TVector3 P_n = (L3_target+L3_beam-L_pip-L_pim).Vect();
      L_n.SetVectM( P_n, nMass );
      std::cerr<<"  missing mass = "<<mm_mass<<std::endl;

      TVector3 boost = (L3_target+L3_beam).BoostVector();
      TLorentzVector L_n_CM = L_n;
      TLorentzVector L3_beam_CM = L3_beam;
      L_n_CM.Boost(-boost);
      L3_beam_CM.Boost(-boost);
      double cos_n = L_n_CM.Vect().Dot(L3_beam_CM.Vect())/(L_n_CM.Vect().Mag()*L3_beam_CM.Vect().Mag());
      std::cerr<<"  missing mom | cos_CM = "<<cos_n<<std::endl;

      Tools::Fill2D( Form("MMpipi_IMpipi"), (L_pip+L_pim).M(), mm_mass );
      Tools::Fill2D( Form("Cosn_IMpipi"), (L_pip+L_pim).M(), cos_n );
	
      //** + + + + + + + + + + + + + **//
      //**  fill histograms & tree   **//
      //** + + + + + + + + + + + + + **//

      kf_flag = -1;

      if(  GeomTools::GetID(vtx_react)==CID_Fiducial ) {

	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% //
	// %%% Kinematical Fit using KinFitter %%% //
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% //
	//--- set TLorentzVector for MC study---//
	// TLorentzVector L3_beam, (L_pip+L_pim), L_pip, L_pim, L_n
	mcmom_beam = TL_gene[0];
	mcmom_pip  = TL_gene[2];
	mcmom_pim  = TL_gene[3];
	mcmom_n    = TL_gene[4];
	
	//--- set TLorentzVector ---//
	TL_meas[0] = L3_beam;
	TL_meas[1] = (L_pip+L_pim);
	TL_meas[2] = L_pip;
	TL_meas[3] = L_pim;
	TL_meas[4] = L_n;
	
	// L3_target is defined as (0, 0, 0, M_3He)
	TVector3 TV_target = L3_target.Vect();
	TVector3 TV_meas[5];
	for( int i=0; i<5; i++ ){
	  TV_meas[i] = TL_meas[i].Vect();
	}
	
	//--- KinFitter :: initialization ---//
	//  = TLorentzVector L3_beam, (L_pip+L_pim), L_pip, L_pim, L_n
	//*** definition of fit particles in cartesian coordinates ***//
	TString str_particle[5] = {"L_beam", "L_K0", "L_pip", "L_pim", "L_n"};
	TFitParticlePxPyPz ParticleTgt = TFitParticlePxPyPz("target", "target", &TV_target,
							    pdg->GetParticle("proton")->Mass(), covZero);
	TFitParticlePxPyPz Particle[5];
	for( int i=0; i<5; i++ ){
	  Particle[i] = TFitParticlePxPyPz(str_particle[i], str_particle[i], &TV_meas[i],
					   pdg->GetParticle(PDG[i])->Mass(), covParticle[i]);
	}
	//*** definition of constraints ***//
	// constraint :: mass of K0
	TFitConstraintM ConstMS = TFitConstraintM("M_K0", "M_K0", 0, 0, pdg->GetParticle(PDG[1])->Mass());
	ConstMS.addParticles1(&Particle[2], &Particle[3]);
	
	// constraint :: 4-momentum conservation
	TFitConstraintEp ConstEp[4];
	TString str_constEp[4]  = {"Px", "Py", "Pz", "E"};
	for( int i=0; i<4; i++ ){
	  ConstEp[i] = TFitConstraintEp(str_constEp[i], str_constEp[i], 0, TFitConstraintEp::component(i), 0);
	  ConstEp[i].addParticles1(&ParticleTgt, &Particle[0]);
	  ConstEp[i].addParticles2(&Particle[2], &Particle[3], &Particle[4]);
	}
	
	//--- KinFitter :: execution ---//
	//*** definition of the fitter ***//
	TKinFitter kinfitter;
	// add measured particles
	kinfitter.addMeasParticles(&Particle[0], &Particle[2], &Particle[3]); // K-, pip, pim
	kinfitter.addUnmeasParticles(&Particle[4]); // missing-n
	// add constraints
	kinfitter.addConstraint(&ConstMS); // mass of Sigma
	for( int i=0; i<4; i++ ){
	  kinfitter.addConstraint(&ConstEp[i]); // 4-momentum conservation
	}
	//*** perform the fit ***//
	kinfitter.setMaxNbIter(50);       // max number of iterations
	kinfitter.setMaxDeltaS(5e-5);     // max delta chi2
	kinfitter.setMaxF(1e-4);          // max sum of constraints
	kinfitter.setVerbosity(KFDEBUG);  // verbosity level
	kinfitter.fit();
	//*** copy fit results ***//
	for( int i=0; i<5; i++ ){
	  TL_kfit[i] = (*Particle[i].getCurr4Vec());
	}
	TL_kfit[1] = TL_kfit[2]+TL_kfit[3];
	
	Tools::Fill1D( Form("KFchi2"), kinfitter.getS()/kinfitter.getNDF() );
	
	std::cerr<<"pi S : status = "<<kinfitter.getStatus()<<", chi2/NDF = "<<kinfitter.getS()<<"/"<<kinfitter.getNDF()<<std::endl;
	//** fill tree **//
	kfmom_beam   = TL_kfit[0];
	kfmom_pip    = TL_kfit[2];
	kfmom_pim    = TL_kfit[3];
	kfmom_n      = TL_kfit[4];
	kf_chi2      = kinfitter.getS();
	kf_NDF       = kinfitter.getNDF();
	kf_status    = kinfitter.getStatus();
	kf_pvalue    = ROOT::Math::chisquared_cdf_c(kinfitter.getS(), kinfitter.getNDF());
	kf_flag       = reactionID;
	
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% //
	// %%% Kinematical Fit using KinFitter %%% //
	// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% //
      
#if 1
	const double pipi_MIN = 0.485;
	const double pipi_MAX = 0.510;
	//--- for the covariance matrix evaluation ---//
	if( flagG4Decay ){
	  if( pipi_MIN<(L_pim+L_pip).M() && (L_pim+L_pip).M()<pipi_MAX ){ // K0 selection
	    for( int i=0; i<5; i++ ){
	      for( int j=0; j<4; j++ ){
		double val = (TL_meas[i][j] - TL_gene[i][j]);
		Tools::Fill1D(Form("cov_%d_%d_%d", i, j, j), val);
		//std::cerr<<" cov "<<i<<" , "<<j<<" = "<<TL_meas[i][j]<<" - "<<TL_gene[i][j]
		//<<" = "<< (TL_meas[i][j] - TL_gene[i][j])<<std::endl;
	      }
	    } // for( int i=0; i<5; i++ ){
	  }
	}
#endif
	
	//** fill tree **//
	mom_beam   = L3_beam;   // 4-momentum(beam)
	mom_target = L3_target; // 4-momentum(target)
	mom_pip    = L_pip;     // 4-momentum(pi+)
	mom_pim    = L_pim;     // 4-momentum(pi-)
	mom_n      = L_n;       // 4-momentum(missing neutron)
	vtx_reaction = vtx_react; // vertex(reaction)
	// vtx_K0decay is already filled
	run_num   = confMan->GetRunNumber(); // run number
	event_num = ev;     // event number
	block_num = 0;      // block number (temp)
	
	std::cout<<"%%% K0n event: Event_Number, Block_Event_Number, CDC_Event_Number = "
		 <<ev<<" , "<<" ---, "<<ev_cdc<<std::endl;
	outfile2->cd();
	K0nTree->Fill();
	outfile->cd();
	nFill_K0n++;
	//** fill tree **//
	
      }// if(  GeomTools::GetID(vtx_react)==CID_Fiducial ) {
    } // if( flagbmom && cdstrackMan->nGoodTrack()==2 &&
    else{
      nAbort_pipi++;
    }
    
    nAbort_end++;
    delete detData2;
    
  } // for( int ev=0; ev<exen; ev++ ){
  
  cout<<"===== Lambda p n reconstruction in MC END ====="<<endl;
  cout<<" nEvent       = "<<exen<<endl;
  cout<<" nEvent_Lp    = "<<nEvent_Lp<<endl;
  cout<<" nEvent_Lpn   = "<<nEvent_Lpn<<endl;
  cout<<"***********************************************"<<endl;
  cout<<" nG4Event_K0n  = "<<nG4Event_K0n<<endl;
  cout<<"***********************************************"<<endl;
  cout<<" AllGoodTrack = "<<AllGoodTrack<<endl;
  cout<<" nTrack       = "<<nTrack<<endl;
  cout<<" nTrack_PID   = "<<nTrack_PID<<endl;
  cout<<"***********************************************"<<endl;
  cout<<" nAbort_nGoodTrack  = "<<nAbort_nGoodTrack<<endl;
  cout<<" nAbort_nCDH        = "<<nAbort_nCDH<<endl;
  cout<<" nAbort_nT0         = "<<nAbort_nT0<<endl;
  cout<<" nAbort_nbpc        = "<<nAbort_nbpc<<endl;
  cout<<" nAbort_bpctrack    = "<<nAbort_bpctrack<<endl;
  cout<<" nAbort_nblc2       = "<<nAbort_nblc2<<endl;
  cout<<" nAbort_fblc2bpc    = "<<nAbort_fblc2bpc<<endl;
  cout<<" nAbort_flagbmom    = "<<nAbort_flagbmom<<endl;
  cout<<" nAbort_ftarget     = "<<nAbort_ftarget<<endl;
  cout<<" nAbort_pipi        = "<<nAbort_pipi<<std::endl;
  cout<<" nAbort_end         = "<<nAbort_end<<std::endl;
  cout<<"***********************************************"<<endl;
  cout<<" nTrack_CDHshare = "<<nTrack_CDHshare<<endl;
  cout<<"*** # of pi+ pi- n events = "<<nFill_K0n<<" ***"<<std::endl;
  cout<<"==============================================="<<endl;

  outfile->Write();
  outfile->Close();

  outfile2->Write();
  outfile2->Close();

  simfile->Close();
  cdcfile->Close();

  delete pdg;

  delete confMan;
  delete simMan;

  delete evHeaderMC;
  delete detData;
  delete reacData;
  delete mcData;

  delete header;
  delete cdsMan;
  delete blMan;
  delete bltrackMan;
  delete cdstrackMan;

  delete simfile;
  delete cdcfile;
  delete outfile;

  return 0;
}
