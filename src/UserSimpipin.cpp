//----------------------------------------------------------------//
// ===== UserSimpipin.cpp =====
// sample program to reconstruct pi S event
// from simulation data and CDC-tracking file generated by "UserSimDatG4.cpp (exe-file = sim)"
// *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
// reconstruction mathod is based on "EventAnalysis_pipin_sakuma.cpp"
//----------------------------------------------------------------//
//  exe-file: simpipin [./simpipin $(ConfFile) $(OutFile) $(InFile) $(CDCtrackingFile)]
//  input : conf-file, G4(knucl4.10)-file, CDC-tracking-file
//  output: when $(OutFile) is "tmp.root", the following 2 files are generated.
//     "tmp.root":      histogram file
//     "tmp_pipin.root": basic information of pipin event is listed up in TTree 
//  *NOTE*: the same conf-file used to generate G4-file is needed
//----------------------------------------------------------------//
//  updated by F.S, 2016 12/28
//----------------------------------------------------------------//

#include "KnuclRootData.h"
#include "ConfMan.h"
#include "SimDataMan.h"
#include "BeamLineTrackMan.h"
#include "CDSTrackingMan.h"
#include "TrackTools.h"
#include "EventHeader.h"
#include "Tools.h"
#include "ELossTools.h"

#include <TDatabasePDG.h>
#include <KinFitter/TKinFitter.h>
#include <KinFitter/TFitParticlePxPyPz.h>
#include <KinFitter/TFitConstraintM.h>
#include <KinFitter/TFitConstraintEp.h>
#include <Math/ProbFuncMathCore.h>

#define KFDEBUG 0 // verbose level of the KinFitter
// 0: quiet, 1: print result, 2: print iterations, 3: print also matrices

//-- set run# --//
const std::string GRUN = "62";

const double MOM_RES = 2.0; // MeV/c
// momentum resolution of the beam-line spectrometer
// was evaluated to be 2.0 +/- 0.5 MeV/c (Hashimoto-D p.58)

//** cut parameters **//
//@@ only different cut parameters btw Sada & Yamaga are listed @@//
double PARA_blc2bpc_dx_MIN;
double PARA_blc2bpc_dx_MAX;
double PARA_blc2bpc_dy_MIN;
double PARA_blc2bpc_dy_MAX;
double PARA_blc2bpc_dxdz_MIN;
double PARA_blc2bpc_dxdz_MAX;
double PARA_blc2bpc_dydz_MIN;
double PARA_blc2bpc_dydz_MAX;
double PARA_lnL_MAX;
double PARA_MM_LP_MIN;
double PARA_MM_LP_MAX;

const double TDC_CDH_MAX = 20; // ns
const double ADC_CDH_MIN = 1;  // MeV

//= = = = pipin final-sample tree = = = =//
TLorentzVector mom_beam;   // 4-momentum(beam)
TLorentzVector mom_target; // 4-momentum(target)
TLorentzVector mom_pi;     // 4-momentum(detected pi)
TLorentzVector mom_mpi;    // 4-momentum(missing pi)
TLorentzVector mom_n;      // 4-momentum(neutron)
double beta; // veracity of neutral particle on CDH
double dE;   // energy deposit on CDH
TVector3 vtx_reaction; // vertex(reaction)
int run_num;   // run number
int event_num; // event number
int block_num; // block number
TLorentzVector mcmom_beam;   // generated 4-momentum(beam)
TLorentzVector mcmom_pi;     // generated 4-momentum(detected pi)
TLorentzVector mcmom_mpi;    // generated 4-momentum(missing pi)
TLorentzVector mcmom_n;      // generated 4-momentum(neutron)
TLorentzVector kfmom_beam;   // 4-momentum(beam) after kinematical refit for pi- Sigma+
TLorentzVector kfmom_pi;     // 4-momentum(detected pi) after kinematical refit for pi- Sigma+
TLorentzVector kfmom_mpi;    // 4-momentum(missing pi) after kinematical refit for pi- Sigma+
TLorentzVector kfmom_n;      // 4-momentum(neutron) after kinematical refit for pi- Sigma+
double kf_chi2;   // chi2 of kinematical refit
double kf_NDF;    // NDF of kinematical refit
double kf_status; // status of kinematical refit -> details can be found in this code
double kf_pvalue; // p-value of kinematical refit
int kf_flag; // flag of correct pair reconstruction, etc
int charge_pi; // flag of detected pi charge = 0(+) or 1(-);
//= = = = pipin final-sample tree = = = =//

using namespace std;

int main( int argc, char** argv )
{
  if( argc!=5 ){
    cout<<argv[0]<<" $(ConfFile) $(OutFile) $(KnuclFile) $(CDCtrackingFile)"<<endl;
    return 0;
  }

  TDatabasePDG *pdg = new TDatabasePDG();
  pdg->ReadPDGTable("pdg_table.txt");

  //-----------------------------------------//
  //--- covariance matrices for KinFitter ---//
  //-----------------------------------------//
  // ### obtained from (p_meas[j]-p_gene[j])
  // ###  using G4-data with TH1F(Form("cov_%d_%d_%d", i, j, j), 100, -cov_MAX, cov_MAX);
  // ###  and evaluated using "Air" Dora MC
  // K- p -> pi-/+ S+/-
  // TLorentzVector L3_beam, (L_n+L_pi), L_mpi, L_n, L_pi
  const double covVal[5][16] = {
#if 0 // res = 150
    { 1.77047e-05, 0, 0, 0,
      0, 1.80463e-05, 0, 0,
      0, 0, 4.19636e-06, 0,
      0, 0, 0, 3.32279e-06 },
    { 0.000199534, 0, 0, 0,
      0, 0.000212277, 0, 0,
      0, 0, 6.0956e-05, 0,
      0, 0, 0, 2.21007e-05 },
    { 0.000224874, 0, 0, 0,
      0, 0.000221527, 0, 0,
      0, 0, 6.66686e-05, 0,
      0, 0, 0, 4.17786e-05 },
    { 0.000148306, 0, 0, 0,
      0, 0.000168409, 0, 0,
      0, 0, 2.10946e-05, 0,
      0, 0, 0, 8.46632e-06 },
    { 6.32632e-06, 0, 0, 0,
      0, 6.2983e-06, 0, 0,
      0, 0, 9.33641e-06, 0,
      0, 0, 0, 4.87227e-06 }
#else // res = 180
    { 1.51598e-05, 0, 0, 0,
      0, 1.89323e-05, 0, 0,
      0, 0, 3.80975e-06, 0,
      0, 0, 0, 3.06016e-06 },
    { 0.000195888, 0, 0, 0,
      0, 0.000179301, 0, 0,
      0, 0, 6.15615e-05, 0,
      0, 0, 0, 2.33863e-05 },
    { 0.000215258, 0, 0, 0,
      0, 0.000181622, 0, 0,
      0, 0, 8.13791e-05, 0,
      0, 0, 0, 4.4093e-05 },
    { 0.000140891, 0, 0, 0,
      0, 0.000157052, 0, 0,
      0, 0, 2.80731e-05, 0,
      0, 0, 0, 7.53984e-06 },
    { 5.77302e-06, 0, 0, 0,
      0, 6.81739e-06, 0, 0,
      0, 0, 1.37235e-05, 0,
      0, 0, 0, 5.64207e-06 }
#endif
  };

  TMatrixD *covZero = new TMatrixD(4, 4);
  covZero->Zero();
  covZero->ResizeTo(3, 3); // resize from 4x4 to 3x3
  TMatrixD *covParticle[5];
  for( int i=0; i<5; i++ ){
    covParticle[i] = new TMatrixD(4, 4);
    int n = 0;
    for( int j=0; j<4; j++ ){
      for( int k=0; k<4; k++ ){
	if( j==k ){
	  (*covParticle[i])[j][k] = covVal[i][n]; // only diagonal elements
	} else{
	  (*covParticle[i])[j][k] = 0;
	}
	n++;
      }
    }
    covParticle[i]->ResizeTo(3, 3); // resize from 4x4 to 3x3
    covParticle[i]->Print(); // Print all
  }
  //-----------------------------------------//
  //--- covariance matrices for KinFitter ---//
  //-----------------------------------------//


  //** Conf file open **// 
  ConfMan *confMan = new ConfMan(argv[1]);
  confMan->Initialize();

  //** Simulation file open **// 
  SimDataMan *simMan = new SimDataMan();
  TFile *simfile = new TFile(argv[3]);
  TTree *tree2 = (TTree*)simfile->Get("tree2");
  RunHeaderMC *runHeader=0;
  tree2->SetBranchAddress("RunHeaderMC", &runHeader);
  if( tree2->GetEntries()==1 ) cout<<"  !!! tree2 entries==1 !!!"<<endl;
  else tree2->GetEntry(0);

  TTree *tree=(TTree*)simfile->Get("tree");
  EventHeaderMC *evHeaderMC = new EventHeaderMC();
  DetectorData  *detData  = new DetectorData();
  ReactionData  *reacData = new ReactionData();
  MCData        *mcData   = new MCData();
  tree->SetBranchAddress("EventHeaderMC", &evHeaderMC);
  tree->SetBranchAddress("DetectorData", &detData);
  tree->SetBranchAddress("ReactionData", &reacData);
  tree->SetBranchAddress("MCData", &mcData);

  //** Getting CDSTracking info. from CDCfile **//
  TFile *cdcfile = new TFile(argv[4]);
  TTree *evTree  = (TTree*)cdcfile->Get("EventTree");
  EventHeader      *header = new EventHeader();
  evTree->SetBranchAddress("EventHeader", &header );
  CDSHitMan        *cdsMan = new CDSHitMan();
  BeamLineHitMan   *blMan  = new BeamLineHitMan();
  BeamLineTrackMan *bltrackMan  = new BeamLineTrackMan();
  CDSTrackingMan   *cdstrackMan = new CDSTrackingMan();
  evTree->SetBranchAddress("CDSTrackingMan", &cdstrackMan);

  //** output file 1 : histograms **//
  TFile *outfile = new TFile(argv[2], "recreate");
  outfile->cd();

  //** output file 2 : pipin final-sample tree **// 
  std::string outfile2_name = string(argv[2]);
  outfile2_name.insert( outfile2_name.size()-5, "_pipin" );
  std::cout<<"pipin file "<<outfile2_name<<std::endl;
  TFile *outfile2 = new TFile( outfile2_name.c_str(), "recreate" );
  outfile2->cd();
  TTree *pipinTree = new TTree( "EventTree", "EventTree" );
  pipinTree->Branch( "mom_beam",   &mom_beam );
  pipinTree->Branch( "mom_target", &mom_target );
  pipinTree->Branch( "mom_pi", &mom_pi );
  pipinTree->Branch( "mom_mpi", &mom_mpi );
  pipinTree->Branch( "mom_n", &mom_n );
  pipinTree->Branch( "beta", &beta );
  pipinTree->Branch( "dE", &dE );
  pipinTree->Branch( "vtx_reaction", &vtx_reaction );
  pipinTree->Branch( "run_num", &run_num );
  pipinTree->Branch( "event_num", &event_num );
  pipinTree->Branch( "block_num", &block_num );
  pipinTree->Branch( "mcmom_beam",   &mcmom_beam );
  pipinTree->Branch( "mcmom_pi", &mcmom_pi );
  pipinTree->Branch( "mcmom_mpi", &mcmom_mpi );
  pipinTree->Branch( "mcmom_n", &mcmom_n );
  pipinTree->Branch( "kfmom_beam",   &kfmom_beam );
  pipinTree->Branch( "kfmom_pi", &kfmom_pi );
  pipinTree->Branch( "kfmom_mpi", &kfmom_mpi );
  pipinTree->Branch( "kfmom_n", &kfmom_n );
  pipinTree->Branch( "kf_chi2", &kf_chi2 );
  pipinTree->Branch( "kf_NDF", &kf_NDF );
  pipinTree->Branch( "kf_status", &kf_status );
  pipinTree->Branch( "kf_pvalue", &kf_pvalue );
  pipinTree->Branch( "kf_flag", &kf_flag );
  pipinTree->Branch( "charge_pi", &charge_pi );
  outfile->cd();


  if( evTree->GetEntries()!=tree->GetEntries() ){
    std::cout<<"  !!! TTree entries don't match !!!"<<std::endl;
    //return 0;
  }


  //=== definitino of histograms ===//
  //** gneneral informantion **//
  Tools::newTH1F( Form("Time"), 3000, -0.5, 2999.5 );
  Tools::newTH1F( Form("EventCheck"), 20, 0, 20 );
  Tools::newTH1F( Form("Scaler"), 41, -0.5, 40.5 );

  //** CDC and CDH information from CDC-trackig file **//
  Tools::newTH1F( Form("nGoodTrack"), 11, -0.5, 10.5 );
  Tools::newTH1F( Form("mul_CDH"), 11, -0.5, 10.5 );
  Tools::newTH1F( Form("mul_CDHc"), 11, -0.5, 10.5 );

  //** beam line **//
  Tools::newTH1F( Form("mul_BHD"), 12, -0.5, 11.5 );
  Tools::newTH1F( Form("mul_T0"),   6, -0.5, 5.5 );
  Tools::newTH1F( Form("tof_T0BHD"), 2000, 20, 40 );
  Tools::newTH1F( Form("tracktime_BPC"),  1200, -200, 400 );
  Tools::newTH1F( Form("trackchi2_BPC"),  200, 0, 20 );
  Tools::newTH1F( Form("ntrack_BPC"),  6, -0.5, 5.5 );
  Tools::newTH1F( Form("tracktime_BLC1"), 1200, -200, 400 );
  Tools::newTH1F( Form("tracktime_BLC2"), 1200, -200, 400 );
  Tools::newTH1F( Form("trackchi2_BLC1"), 200, 0, 20 );
  Tools::newTH1F( Form("trackchi2_BLC2"), 200, 0, 20 );
  Tools::newTH1F( Form("ntrack_BLC1"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_BLC2"), 6, -0.5, 5.5 );
  Tools::newTH2F( Form("dydx_BLC2BPC"),     130, -1.3, 1.3, 130, -1.3, 1.3 );
  Tools::newTH2F( Form("dydzdxdz_BLC2BPC"), 175, -0.035, 0.035, 175, -0.035, 0.035 );
  Tools::newTH1F( Form("trackchi2_beam"), 400, 0, 40 );
  Tools::newTH1F( Form("momentum_beam"), 180, 0.92, 1.10 );

  //** CDS **//
  Tools::newTH1F( Form("trackchi2_CDC"), 1000, 0, 50 );
  Tools::newTH2F( Form("PID_CDS_beta"), 1000, 0, 5, 1000, -1.2, 1.2 );
  Tools::newTH2F( Form("PID_CDS"), 1000, -0.6, 5, 1000, -1.2, 1.2 );
  Tools::newTH2F( Form("PID_CDS_acc"), 1000, -0.6, 5, 1000, -1.2, 1.2 );
  Tools::newTH1F( Form("ntrack_CDS"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_pi_plus"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_proton"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_deuteron"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_pi_minus"), 6, -0.5, 5.5 );
  Tools::newTH1F( Form("ntrack_K_minus"), 6, -0.5, 5.5 );

  //** forward counters **//
  Tools::newTH1F( Form("mul_BVC"), 9, -0.5, 8.5 );
  Tools::newTH1F( Form("mul_CVC"), 11, -0.5, 10.5 );
  Tools::newTH1F( Form("mul_PC"), 11, -0.5, 10.5 );

  //** pi Xx event **//
  Tools::newTH1F( Form("diff_CDH"), 73, -36.5, 36.5 );
  Tools::newTH1F( Form("diff_CDH_CDC"), 180, 0, 180 );
  Tools::newTH2F( Form("dE_betainv"), 200, 0, 10, 200, 0, 50);
  Tools::newTH2F( Form("dE_betainv_fiducial"), 200, 0, 10, 200, 0, 50);
  Tools::newTH2F( Form("dE_betainv_fiducial_beta"), 200, 0, 10, 200, 0, 50);
  Tools::newTH2F( Form("dE_betainv_fiducial_beta_dE"), 200, 0, 10, 200, 0, 50);
  Tools::newTH2F( Form("dE_betainv_fiducial_beta_dE"), 200, 0, 10, 200, 0, 50);
  Tools::newTH2F( Form("dE_betainv_fiducial_beta_dE_pi"), 200, 0, 10, 200, 0, 50);
  Tools::newTH2F( Form("MMom_MMass"), 140, 0.0, 0.7, 100, 0, 1.5 );
  Tools::newTH2F( Form("MMom_MMass_fiducial"), 140, 0.0, 0.7, 100, 0, 1.5 );
  Tools::newTH2F( Form("MMom_MMass_fiducial_beta"), 140, 0.0, 0.7, 100, 0, 1.5 );
  Tools::newTH2F( Form("MMom_MMass_fiducial_beta_dE"), 140, 0.0, 0.7, 100, 0, 1.5 );
  Tools::newTH2F( Form("MMom_MMass_fiducial_beta_dE"), 140, 0.0, 0.7, 100, 0, 1.5 );
  Tools::newTH2F( Form("MMom_MMass_fiducial_beta_dE_pi"), 140, 0.0, 0.7, 100, 0, 1.5 );

  Tools::newTH2F( Form("Cospi_IMnpi"), 70, 1.0, 1.7, 40, -1, 1 );
  Tools::newTH2F( Form("Cospi_IMnpi_pi"), 70, 1.0, 1.7, 40, -1, 1 );
  Tools::newTH1F( Form("DCA_pi"), 200, 0, 2 );

  Tools::newTH2F( Form("CDH_ADC_TDC_n"), 100, 0.0, 40.0, 100, 0.0, 40.0 );

#if 1
  //*** for kinematical fit ***//
  // beam_K(K+), Sigma+/-, missing-pi, n from S, pi+/- from S
  // !!! only diagonal components !!!
  const int BIN = 100;
  double cov_MAX;
  for( int i=0; i<5; i++ ){
    for( int j=0; j<4; j++ ){
      for( int k=0; k<4; k++ ){
	if( i==0 || i==4 ) // K-, pi
	  cov_MAX = 0.02;
	else // Sigma, pi_miss, n
	  cov_MAX = 0.1;
	Tools::newTH1F(Form("cov_%d_%d_%d", i, j, k), BIN, -cov_MAX, cov_MAX);
      }
    }
  }
#endif
  Tools::newTH1F( Form("KFchi2"), 100, 0, 100 );
  Tools::newTH1F( Form("KF_decision"), 2, -0.5, 1.5 );

  int eventn = tree->GetEntries();
  int stopn  = confMan->GetStopEvNum();
  int exen   = ( 0<stopn && stopn<eventn ) ? stopn : eventn;

  cout<<"===== Lambda p n reconstruction in MC START ============="<<endl;
  cout<<"     # of All  Event in EventTree:     "<<eventn<<endl;
  cout<<"     # of Stop Event in analyzer.conf: "<<stopn<<endl;
  cout<<"     # of Exe  Event in this program:  "<<exen<<endl;
  cout<<"========================================================="<<endl;

  //** set cut parameters **//
  if ( GRUN=="62" ){ // same as Run65 [20180524]
    //** from Yamaga:MyAnalysisBL.cpp **//
    PARA_blc2bpc_dx_MIN = -0.75;
    PARA_blc2bpc_dx_MAX = 0.75;
    PARA_blc2bpc_dy_MIN = -0.75;
    PARA_blc2bpc_dy_MAX = 0.75;
    PARA_blc2bpc_dxdz_MIN = -0.02;
    PARA_blc2bpc_dxdz_MAX = 0.02;
    PARA_blc2bpc_dydz_MIN = -0.02;
    PARA_blc2bpc_dydz_MAX = 0.02;
  }else{
    std::cerr<<" !!! pleas set paramter::GRUN in EventAnalysis_Lpn_sakuma.cpp => 49c or 65 !!!"<<std::endl;
    return 0;
  }

  //=== counter ===//
  int AllGoodTrack = 0;
  int nTrack       = 0;
  int nTrack_PID   = 0;

  int nEvent_pip   = 0;
  int nEvent_pim   = 0;
  int nEvent_n     = 0;
  int nEvent_pipn  = 0;
  int nEvent_pimn  = 0;

  int nG4Decay       = 0;
  int nG4Event_piS   = 0;
  int nReconst_piS1  = 0; // piS reconstructed events
  int nReconst_piS2  = 0; // after fiducial-volume, beta cut
  int nReconst_pipin = 0; // KF candidates
  int nReconst_piS3  = 0; // after KF selection (0.01<p-value)
  int nReconst_piS4  = 0; // after dE cut (2<dE)

  int nAbort_nGoodTrack = 0;
  int nAbort_nCDH = 0;
  int nAbort_nT0 = 0;
  int nAbort_nbpc = 0;
  int nAbort_bpctrack = 0;
  int nAbort_nblc2 = 0;
  int nAbort_fblc2bpc = 0;
  int nAbort_flagbmom = 0;
  int nAbort_ftarget = 0;
  int nAbort_CDHiso = 0;
  int nAbort_pi = 0;
  int nAbort_end = 0;

  int nFill_pi = 0;
  int nFill_pipin = 0;

  int nTrack_CDHshare = 0;

  int ev_cdc = 0;

  //=== event loop ===//
  for( int ev=0; ev<exen; ev++ ){
#if 1
    if( /*ev<100 ||*/ ev%100==0 ) std::cout<<"> Event Number "<<ev<<std::endl;
#else
    std::cout<<"> Event Number "<<ev<<std::endl;
    if( ev == 1000 ) break;
#endif

    Tools::Fill1D( Form("EventCheck"), 1 );

    cdsMan->Clear();
    blMan->Clear();
    bltrackMan->Clear();

    tree->GetEntry(ev); // MC
    evTree->GetEntry(ev_cdc); // CDC-tracking
    
    //### event ID matching
    if( evHeaderMC->eventID()!=header->ev() ){
      continue;
    }
    ev_cdc++;


    //### CDH ADC cut ###//
    DetectorData *detData2  = new DetectorData();
    for( int i=0; i<detData->detectorHitSize(); i++ ){
      if( !(detData->detectorHit(i)->detectorID()==CID_CDH && detData->detectorHit(i)->adc()<ADC_CDH_MIN) ){
	detData2->setDetectorHit(*detData->detectorHit(i));
      }
    }


    simMan->Convert(detData2, confMan, blMan, cdsMan);
    cdstrackMan->Calc(cdsMan, confMan, true);
    bltrackMan->DoTracking(blMan, confMan, true, true);


    //##########################//
    //### get G4 information ###//
    //##########################//
    bool flagG4Decay = false;
    bool piS_detect = false;
    std::cerr<<"======================"<<std::endl;
    //for( int j=0; j<reacData->ParticleSize(); j++ ){
    //std::cerr<<j<<" "<<reacData->PDG(j)<<" "<<reacData->GetParticle(j).P()<<std::endl;
    //}
    int reactionID = reacData->ReactionID();
    const int PDG1[5] = {321, 3222, -211, 2112,  211}; // pi-Sigma+, ReacID = 476
    const int PDG2[5] = {321, 3112,  211, 2112, -211}; // pi+Sigma-, ReacID = 536
    int PDG[5] = {0, 0, 0, 0, 0};
    for( int j=0; j<5; j++ ){
      if( reactionID==476 )      PDG[j] = PDG1[j];
      else if( reactionID==536 ) PDG[j] = PDG2[j];
    }
    // TLorentzVector L3_beam, (L_n+L_pi), L_mpi, L_n, L_pi
    int parentID[5] = {0, 0, 0, -1, -1};
    int ID[5]       = {-1, -1, -1, -1, -1};
    int trackID[5]  = {-1, -1, -1, -1, -1};
    int nparticle = 0;
    for( int j=0; j<mcData->trackSize(); j++ ){
      int pdgcode = mcData->track(j)->pdgID();
      int parent  = mcData->track(j)->parentTrackID();
      int track   = mcData->track(j)->trackID();
      //cerr<<j<<" | "<<pdgcode<<" "<<parent<<" "<<track<<endl;
      for( int k=0; k<5; k++ ){
	if( pdgcode==PDG[k] && parent==parentID[k] && ID[k]==-1 ){
	  ID[k] = j;
	  trackID[k] = track;
	  nparticle++;
	  //cerr<<j<<","<<k<<" | "<<pdgcode<<" "<<parent<<" "<<track<<endl;
	  if( k==1 ){
	    parentID[3] = track;
	    parentID[4] = track;
	  }
	  if( k==3 ) std::cerr<<k<<" | "<<pdgcode<<" "<<parent<<" "<<track<<" "<<mcData->track(j)->momentum().Mag()
			      <<" ("<<mcData->track(j)->momentum().CosTheta()<<" , "<<mcData->track(j)->momentum().Phi()*360/TwoPi<<")"<<std::endl;
	  if( pdgcode==3122 ){
	    std::cerr<<" Lambda conversion!!!, momentum = "<<mcData->track(ID[1])->momentum().Mag()<<std::endl;
	    break;
	  }
	  break;
	}
      }
    }
    //cerr<<" nparticle = "<<nparticle<<endl;
    if( nparticle==5 ) flagG4Decay = true;
    if( !flagG4Decay ) cerr<<" nparticle = "<<nparticle<<endl;


    int nCDHhit[5] = {0, 0, 0, 0, 0};
    if( flagG4Decay ){ // Y -> N pi decay
      nG4Decay++;
      for( int j=0; j<detData2->detectorHitSize(); j++ ){
	int cid    = detData2->detectorHit(j)->detectorID();
	int track  = detData2->detectorHit(j)->trackID();
	int parent = detData2->detectorHit(j)->parentID();//mcData->track(j)->parentTrackID();
	for( int k=2; k<5; k++ ){
	  if( cid==CID_CDH && track==trackID[k] ) nCDHhit[k]++;
	}
	//*** neutron hit search ***// (from secondary processes)
	for( int k=3; k<4; k++ ){
	  if( cid==CID_CDH && parent==trackID[k] ){
	    std::cerr<<"ADC = "<<detData2->detectorHit(j)->adc()
		     <<", pos = "<<detData2->detectorHit(j)->pos().CosTheta()
		     <<", "<<detData2->detectorHit(j)->pos().Phi()*360/TwoPi<<std::endl;
	    nCDHhit[k]++;
	  }
	}
	//*** neutron hit search ***//
      }
    }
    if( nCDHhit[3] && nCDHhit[4] ){
      piS_detect = true;
      nG4Event_piS++;
    }

    //if( !piS_detect ) continue;

#if 1
    for( int k=0; k<5; k++ ) std::cerr<<nCDHhit[k]<<" ";
    std::cerr<<std::endl;
    if( piS_detect ){
      std::cerr<<" !!! piS_detect !!! "<<std::endl;
      //getchar();
    }
#endif
#if 0
    else{
      continue;
    }
#endif

    
#if 1
    //*** for kinematical fit ***//
    // TLorentzVector L3_beam, (L_n+L_pi), L_mpi, L_n, L_pi
    TLorentzVector TL_gene[5]; // generated
    for( int i=0; i<5; i++ ){
      if( i ) TL_gene[i].SetVectM(mcData->track(ID[i])->momentum()*0.001,  pdg->GetParticle(PDG[i])->Mass()); // GeV
      else    TL_gene[i].SetVectM(mcData->track(ID[i])->momentum()*-0.001, pdg->GetParticle(PDG[i])->Mass()); // GeV
    }
#endif
    //##########################//
    //### get G4 information ###//
    //##########################//


    //=======================================//
    //=== from EventAnalysis_Lpn_sada.cpp ===//
    //=======================================//
    int nGoodTrack = cdstrackMan->nGoodTrack();
    int nallTrack  = cdstrackMan->nTrack();
    AllGoodTrack += nGoodTrack;
    nTrack += nallTrack;
    Tools::Fill1D( Form("nGoodTrack"), nGoodTrack );

    if( nGoodTrack!=1 ){ // dedicated for pi S event
      nAbort_nGoodTrack++;
      continue;
    }

    //** # of CDH-hits cut **// 
    int nCDH = 0;
    for( int i=0; i<cdsMan->nCDH(); i++ ){
      //if( cdsMan->CDH(i)->CheckRange() ){
      if( cdsMan->CDH(i)->CheckRange() && cdsMan->CDH(i)->ctmean()<TDC_CDH_MAX ){
	nCDH++;
      }
    }
    Tools::Fill1D( Form("mul_CDH"), nCDH );
    if( nCDH!=2 ){ //** only 2 hits events **//
      nAbort_nCDH++;
      continue;
    }

    //** T0 = 1hit selection **//
    int nT0 = 0;
    for( int i=0; i<blMan->nT0(); i++ ){
      HodoscopeLikeHit *hit = blMan->T0(i);
      if( hit->CheckRange() ) nT0++;
    }
    Tools::Fill1D( Form("mul_T0"),  nT0 );
    if( nT0!=1 ){ 
      nAbort_nT0++;
      continue;
    }

    //** Beam PID **//
    double ctmT0 = 0;
    for( int i=0; i<blMan->nT0(); i++ ){
      if( blMan->T0(i)->CheckRange() ){
	ctmT0 = blMan->T0(i)->ctmean();
      }
    }
    int pid_beam = 0; //0:K 1:pi 3:else

    //** BPC track selection **//
    int nbpc = 0;
    int bpcid = -1;
    for( int i=0; i<bltrackMan->ntrackBPC(); i++ ){
      nbpc++;
      bpcid = i;
    }
    Tools::Fill1D( Form("ntrack_BPC"), nbpc );
    if( nbpc!=1 ){
      nAbort_nbpc++;
      continue;
    }
    LocalTrack *bpctrack = bltrackMan->trackBPC(bpcid);    
    if( bpctrack->chi2all()>10 ){
      nAbort_bpctrack++;
      continue;
    }

    //** vertex calculation **//
    for( int it1=0; it1<cdstrackMan->nGoodTrack(); it1++ ){
      cdstrackMan->CalcVertex_beam(cdstrackMan->GoodTrackID(it1), bltrackMan, confMan);
    }


    //** vectors for PID container **//
    std::vector <int> pip_ID;
    std::vector <int> pim_ID;
    std::vector <int> km_ID;
    std::vector <int> p_ID;
    std::vector <int> d_ID;
    
    std::vector <int> vCDHseg;

    bool flagbmom = false;
    TVector3 vtx_react;

    //** BLC2 track **//
    int nblc2 = 0;
    int blc2id = -1;
    for( int i=0; i<bltrackMan->ntrackBLC2(); i++ ){
      nblc2++;
      if( bltrackMan->trackBLC2(i)->chi2all()<10 ) blc2id = i;
    }
    Tools::Fill1D( Form("ntrack_BLC2"), nblc2 );
    if( !(nblc2==1 && blc2id!=-1) ){
      nAbort_nblc2++;
      continue;
    }

    //### BLC2-BPC position matching
    bool fblc2bpc = false;
    for( int ii=0; ii<bltrackMan->ntrackBLC2(); ii++ ){
      if( ii!=blc2id ) continue;
      LocalTrack *blc2 = bltrackMan->trackBLC2(ii);
      double xblc2bpc[2], yblc2bpc[2];
      double xmom[2], ymom[2];

      TVector3 Pos_BPC, Pos_BLC2, tmp;
      confMan->GetBLDCWireMapManager()->GetGParam( CID_BPC, Pos_BPC, tmp );
      confMan->GetBLDCWireMapManager()->GetGParam( CID_BLC2a, Pos_BLC2, tmp );
      double zPos_BPC = Pos_BPC.Z();
      double zPos_BLC2 = Pos_BLC2.Z();
      double zPos_BPC_BLC2 = (Pos_BPC.Z()+Pos_BLC2.Z())/2;

      bpctrack->XYPosatZ( zPos_BPC_BLC2, xblc2bpc[0], yblc2bpc[0] );
      bpctrack->XYPosatZ( zPos_BPC, xmom[0], ymom[0] );
      blc2->XYPosatZ( zPos_BPC_BLC2, xblc2bpc[1], yblc2bpc[1]);
      blc2->XYPosatZ( zPos_BLC2, xmom[1], ymom[1]);
      double dxdz[2], dydz[2];
      dxdz[0] = (xmom[0]-xblc2bpc[0]) / (zPos_BPC-zPos_BPC_BLC2);
      dxdz[1] = (xmom[1]-xblc2bpc[1]) / (zPos_BLC2-zPos_BPC_BLC2);
      dydz[0] = (ymom[0]-yblc2bpc[0]) / (zPos_BPC-zPos_BPC_BLC2);
      dydz[1] = (ymom[1]-yblc2bpc[1]) / (zPos_BLC2-zPos_BPC_BLC2);

      if(      (xblc2bpc[1]-xblc2bpc[0])<PARA_blc2bpc_dx_MIN ||
	       (xblc2bpc[1]-xblc2bpc[0])>PARA_blc2bpc_dx_MAX ) fblc2bpc = false;
      else if( (yblc2bpc[1]-yblc2bpc[0])<PARA_blc2bpc_dy_MIN ||
	       (yblc2bpc[1]-yblc2bpc[0])>PARA_blc2bpc_dy_MAX ) fblc2bpc = false;
      else if( (dxdz[1]-dxdz[0])<PARA_blc2bpc_dxdz_MIN ||
	       (dxdz[1]-dxdz[0])>PARA_blc2bpc_dxdz_MAX ) fblc2bpc = false;
      else if( (dydz[1]-dydz[0])<PARA_blc2bpc_dydz_MIN ||
	       (dydz[1]-dydz[0])>PARA_blc2bpc_dydz_MAX ) fblc2bpc = false;
      else fblc2bpc = true;

      Tools::Fill2D( Form("dydx_BLC2BPC"), xblc2bpc[1]-xblc2bpc[0], yblc2bpc[1]-yblc2bpc[0] );
      Tools::Fill2D( Form("dydzdxdz_BLC2BPC"), dxdz[1]-dxdz[0], dydz[1]-dydz[0] );
    }

    if( !fblc2bpc ){
      nAbort_fblc2bpc++;
      continue;
    }

    //** beam momentum calculation **//
    TLorentzVector L3_beambf;  // 4-Momentum(beam) in LAB
    TLorentzVector L3_beam;    // 4-Momentum(beam) in LAB with dE correcion
    TLorentzVector L3_target;  // 4-Momentum(He3-target) in LAB
    TLorentzVector L3_beambfCM;  // 4-Momentum(beam) in CM
    TLorentzVector L3_beamCM;    // 4-Momentum(beam) in CM with dE correcion
    TLorentzVector L3_targetCM;  // 4-Momentum(He3-target) in CM

    TVector3 Pos_T0;
    confMan->GetGeomMapManager()->GetPos( CID_T0, 0, Pos_T0 );
    double zPos_T0 = Pos_T0.Z();

    double beammom = 0;
    for( int j=0; j<mcData->trackSize(); j++ ){
      int pdgcode = mcData->track(j)->pdgID();
      int parent  = mcData->track(j)->parentTrackID();
      if( pdgcode==321 && parent==0 ){
	beammom = (mcData->track(j)->momentum().Mag()+gRandom->Gaus(0,MOM_RES))/1000.0;
	break;
      }
    }

    double x1, y1, x2, y2;
    double z1 = 0, z2 = 20;
    bpctrack->XYPosatZ(z1, x1, y1);
    bpctrack->XYPosatZ(z2, x2, y2);
    TVector3 ls;
    ls.SetXYZ(x2-x1, y2-y1, z2-z1);
    ls = ls.Unit();
    TVector3 Pp_beam = beammom*ls; 
    TVector3 Pp_target;
    Pp_target.SetXYZ(0, 0, 0);

    L3_beambf.SetVectM(Pp_beam , kpMass);
    L3_target.SetVectM(Pp_target, pMass);
    L3_beam = L3_beambf;
    TVector3 boost = (L3_target+L3_beam).BoostVector();
    L3_beambfCM = L3_beam;
    L3_targetCM = L3_target;
    L3_beambfCM.Boost(-1*boost);
    L3_targetCM.Boost(-1*boost);
    flagbmom = true;

    if( !flagbmom ){
      nAbort_flagbmom++;
      continue;
    }
    Tools::Fill1D( Form("momentum_beam"), L3_beambf.P() );

    //** + + + + + + + + + + + + **//
    //**  PID in CDS             **//
    //** + + + + + + + + + + + + **//

    int CDHseg;

    //** PID of CDS tracks **//
    for( int it=0; it<cdstrackMan->nGoodTrack(); it++ ){
      CDSTrack *track = cdstrackMan->Track(cdstrackMan->GoodTrackID(it));

      Tools::Fill1D( Form("trackchi2_CDC"), track->Chi() );

      if( track->Chi()>30 ) continue; 
      if( !track->CDHFlag() ) continue;

      double mom = track->Momentum();
      TVector3 vtxb1, vtxb2, vtxb;
      track->GetVertex( bpctrack->GetPosatZ(zPos_T0), bpctrack->GetMomDir(), vtxb1, vtxb2 );
      track->SetPID(-1);
      vtxb = (vtxb1+vtxb2)*0.5;

      double tof = 999.;
      double mass2 = -999.;
      for( int icdh=0; icdh<track->nCDHHit(); icdh++ ){
	HodoscopeLikeHit *cdhhit=track->CDHHit(cdsMan,icdh);
	double tmptof = cdhhit->ctmean() - ctmT0;      
	//cerr<<icdh<<": "<<cdhhit->ctmean()<<" - "<<ctmT0<<" = "<<tmptof<<endl;
	if( tmptof<tof || tof==999. ){ //*** apply minimum TOF hit ***//
	  tof = tmptof;
	  CDHseg = cdhhit->seg();
	}
      }
      //*************************************
      // In a CDH hit-shared event, only some one track is adopted and the others are discarded
      //*************************************

      bool CDHflag = true;
      for( int m=0; m<(int)vCDHseg.size(); m++ ){
	if( CDHseg==vCDHseg[m] ) CDHflag = false;
      }
      if( !CDHflag ){
	nTrack_CDHshare++;
	continue;
      }
      vCDHseg.push_back(CDHseg);

      //** calculation of beta and squared-mass **//
      double tmptof, beta_calc;
      if( !TrackTools::FindMass2( track, bpctrack, tof, L3_beam.Vect().Mag(),
				  pid_beam, beta_calc, mass2, tmptof ) ){
	std::cerr<<" !!! failure in PID_CDS [FindMass2()] !!! "<<std::endl;
	continue;
      }
      int pid = TrackTools::PIDcorr(mom,mass2);      
      track->SetPID(pid);
      Tools::Fill2D( "PID_CDS_beta", 1/beta_calc, mom );
      Tools::Fill2D( "PID_CDS", mass2, mom );

      //** energy loss calculation **//
      double tmpl;
      TVector3 vtx_beam, vtx_cds;
      if( !track->CalcVertexTimeLength(bpctrack->GetPosatZ(0), bpctrack->GetMomDir(), track->Mass(),
				       vtx_beam, vtx_cds, tmptof, tmpl, true) ){
	std::cerr<<" !!! failure in energy loss calculation [CalcVertexTimeLength()] !!! "<<std::endl;
	continue;
      }

      if( pid==CDS_PiMinus ){
	pim_ID.push_back(cdstrackMan->GoodTrackID(it));
	Tools::Fill2D( "PID_CDS_acc", mass2, mom );
      }
      else if( pid==CDS_PiPlus ){
	pip_ID.push_back(cdstrackMan->GoodTrackID(it));
	Tools::Fill2D( "PID_CDS_acc", mass2, mom );
      }
      else if( pid==CDS_Proton )
	p_ID.push_back(cdstrackMan->GoodTrackID(it));
      else if( pid==CDS_Deuteron )
	d_ID.push_back(cdstrackMan->GoodTrackID(it));
      else if( pid==CDS_Kaon )
	km_ID.push_back(cdstrackMan->GoodTrackID(it));
      
      if( pid<7 ) nTrack_PID++;

      //cerr<<"    pid = "<<pid<<", tof = "<<tmptof<<", beta = "<<beta_calc
      //<<", mom = "<<mom<<", mass = "<<sqrt(fabs(mass2))<<endl;

    }// for( int it=0; it<cdstrackMan->nGoodTrack(); it++ ){
    //** end of PID **//

    Tools::Fill1D( Form("ntrack_CDS"), pip_ID.size()+p_ID.size()+d_ID.size()+pim_ID.size()+km_ID.size() );
    Tools::Fill1D( Form("ntrack_pi_plus"),  pip_ID.size() );
    Tools::Fill1D( Form("ntrack_proton"),   p_ID.size() );
    Tools::Fill1D( Form("ntrack_deuteron"), d_ID.size() );
    Tools::Fill1D( Form("ntrack_pi_minus"), pim_ID.size() );
    Tools::Fill1D( Form("ntrack_K_minus"),  km_ID.size() );



    //** charge veto with BVC, CVC (TOF=CVC), & PC **//
    int nBVC = 0;
    int nCVC = 0;
    int nPC  = 0;
    for( int i=0; i<blMan->nBVC(); i++ ){
      if( blMan->BVC(i)->CheckRange() ) nBVC++;
    }
    for( int i=0; i<blMan->nTOF(); i++ ){
      if( blMan->TOF(i)->CheckRange() ) nCVC++;
    }
    for( int i=0; i<blMan->nPC(); i++ ){
      if( blMan->PC(i)->CheckRange() ) nPC++;
    }
    Tools::Fill1D( Form("mul_BVC"), nBVC );
    Tools::Fill1D( Form("mul_CVC"), nCVC );
    Tools::Fill1D( Form("mul_PC"),  nPC );


#if 0
    //** find neighboring hits on CDH **//
    std::vector <int> nCDHseg;     // neutral hit candidates
    std::vector <int> CDHhit_list; // CDH hit container
    for( int n=0; n<cdsMan->nCDH(); n++ ){
      if( cdsMan->CDH(n)->CheckRange() && cdsMan->CDH(n)->ctmean()<TDC_CDH_MAX ){
        CDHhit_list.push_back( cdsMan->CDH(n)->seg() );
      }
    }
    std::sort(vCDHseg.begin(), vCDHseg.end());
    std::sort(CDHhit_list.begin(), CDHhit_list.end());
    std::set_difference( CDHhit_list.begin(), CDHhit_list.end(),
                         vCDHseg.begin(), vCDHseg.end(),
                         std::back_inserter(nCDHseg) );

    int nCDH_neighb = 0;
    for( int l=0; l<(int)nCDHseg.size(); l++ ){   // neutral hit candidates
      int flag_neighb = 0;
      for( int m=0; m<(int)vCDHseg.size(); m++ ){ // track associated hits
	if( abs(nCDHseg[l]-vCDHseg[m])==1 || abs(nCDHseg[l]-vCDHseg[m])==35 ) flag_neighb++;
      }
      if( flag_neighb ) nCDH_neighb++;
    }
    std::cerr<<"all   hits : ";
    for( int n=0; n<(int)CDHhit_list.size(); n++ ){
      std::cerr<<CDHhit_list[n]<<" ";
    } std::cerr<<std::endl;
    std::cerr<<"track hits : ";
    for( int n=0; n<(int)vCDHseg.size(); n++ ){
      std::cerr<<vCDHseg[n]<<" ";
    } std::cerr<<std::endl;
    std::cerr<<"diff  hits : ";
    for( int n=0; n<(int)nCDHseg.size(); n++ ){
      std::cerr<<nCDHseg[n]<<" ";
    } std::cerr<<std::endl;
    std::cerr<<" nCDH = "<<nCDH<<", nCDH_neighb = "<<nCDH_neighb<<std::endl;

    //** re-count CDH multiplicity **//
    int nCDHc = nCDH-nCDH_neighb;
#endif


    //** + + + + + + + + + + + **//
    //**  pi X event  **//
    //** + + + + + + + + + + + **//
    
    if( flagbmom && cdstrackMan->nGoodTrack()==1 &&
	(pim_ID.size()==1 || pip_ID.size()==1) ){

      nFill_pi++;
      std::cerr<<" fill pi X event"<<std::endl;
      
      //** find CDH hit from neutral particles **//
      std::vector <int> nCDHseg;
      std::vector <int> CDHhit_list;
      for( int n=0; n<cdsMan->nCDH(); n++ ){
	//if( cdsMan->CDH(n)->CheckRange() )
	if( cdsMan->CDH(n)->CheckRange() && cdsMan->CDH(n)->ctmean()<TDC_CDH_MAX )
	  CDHhit_list.push_back( cdsMan->CDH(n)->seg() );
      }
      std::sort(vCDHseg.begin(), vCDHseg.end());
      std::sort(CDHhit_list.begin(), CDHhit_list.end());
      std::set_difference( CDHhit_list.begin(), CDHhit_list.end(),
			   vCDHseg.begin(), vCDHseg.end(),
			   std::back_inserter(nCDHseg) );

#if 1
      if( nCDHseg.size()!=1 ){
	std::cerr<<" CDH neutral hit is not 1 :: "<<nCDHseg.size()<<std::endl;
      }
      
      std::cerr<<"# of diff = "<<nCDHseg.size()<<std::endl;
      std::cerr<<"CDH hits =   ";
      for( int n=0; n<(int)CDHhit_list.size(); n++ ){
	std::cerr<<CDHhit_list[n]<<" ";
      } std::cerr<<std::endl;
      std::cerr<<"track hits = ";
      for( int n=0; n<(int)vCDHseg.size(); n++ ){
	std::cerr<<vCDHseg[n]<<" ";
      } std::cerr<<std::endl;
      std::cerr<<"diff hits =  ";
      for( int n=0; n<(int)nCDHseg.size(); n++ ){
	std::cerr<<nCDHseg[n]<<" ";
      } std::cerr<<std::endl;
#endif     
 
      //** isolation cut **//
      int flag_isolation = 0;
      for( int l=0; l<(int)nCDHseg.size(); l++ ){
	for( int m=0; m<(int)CDHhit_list.size(); m++ ){
	  if( nCDHseg[l]-CDHhit_list[m] ) Tools::Fill1D( Form("diff_CDH"), nCDHseg[l]-CDHhit_list[m] );
	  if( abs(nCDHseg[l]-CDHhit_list[m])==1 || abs(nCDHseg[l]-CDHhit_list[m])==35 )
	    flag_isolation++;
	}
      }
      if( flag_isolation ){
	//std::cerr<<"CDH hit candidate is NOT isolated !!!"<<std::endl;
	nAbort_CDHiso++;
	continue;
      }
      
      //** copy neutral CDH hit candidate **//
      int icdh = -1;
      for( int n=0; n<cdsMan->nCDH(); n++ ){
	if( cdsMan->CDH(n)->seg()==nCDHseg[0] ) icdh = n;
      }
      HodoscopeLikeHit *ncdhhit = cdsMan->CDH(icdh);
      
      //** charge veto using CDC **//
      TVector3 Pos_CDH;
      confMan->GetGeomMapManager()->GetPos( CID_CDH, ncdhhit->seg(), Pos_CDH );
      //std::cerr<<"CDH candidate = "<<ncdhhit->seg()<<" -> "<<Pos_CDH.Phi()/TwoPi*360<<" deg"<<std::endl;
      
      const double PhiMin = -15.0/360*TwoPi; // rad
      const double PhiMax =  15.0/360*TwoPi; // rad
      //std::cerr<<"Min/Max = "<<PhiMin/TwoPi*360<<"/"<<PhiMax/TwoPi*360<<" deg"<<std::endl;
      
      int nCDC = 0;
      for( int l=14; l<16; l++ ){ // charge veto using layer 14, 15
	for( int m=0; m<cdsMan->nCDC(l); m++ ){
	  CDCHit *cdc=cdsMan->CDC(l,m);
	  TVector3 Pos_CDC = cdc->wpos();
	  Pos_CDC.SetZ(0); // only xy pos is used
	  double angle = Pos_CDC.Angle(Pos_CDH); // rad
	  //std::cerr<<"CDC "<<l<<" "<<m<<" "<<cdc->wire()<<" -> "<<Pos_CDC.Phi()/TwoPi*360
	  //<<" deg :: diff = "<<angle/TwoPi*360<<" deg"<<std::endl;
	  Tools::Fill1D( Form("diff_CDH_CDC"), angle/TwoPi*360 );
	  if( PhiMin<angle && angle<PhiMax ) nCDC++;
	}
      }
      //std::cerr<<"# of CDC hits for nCDH candidate = "<<nCDC<<std::endl;
      
      //Pos_CDH.SetZ(-1*ncdhhit->hitpos()); // (-1*) is wrong in SIM [20170925]
      Pos_CDH.SetZ(ncdhhit->hitpos());
      
      //** neutral particle in CDH **//
      if( !nCDC ){
	CDSTrack *track_pi = 0;
	if      ( pip_ID.size()==1 ) track_pi = cdstrackMan->Track( pip_ID[0] ); // only 1 track
	else if ( pim_ID.size()==1 ) track_pi = cdstrackMan->Track( pim_ID[0] ); // only 1 track
	
	TVector3 vtx_b; // Vertex(baem-particle)_on_beam
	TVector3 vtx_p; // Vertex(baem-particle)_on_particle
	track_pi->GetVertex( bpctrack->GetPosatZ(0), bpctrack->GetMomDir(), vtx_b, vtx_p );
	vtx_react = 0.5*(vtx_b+vtx_p); // reaction vertex
	
	
	//** beam kaon tof **//
	TVector3 Pos_T0;
	confMan->GetGeomMapManager()->GetPos( CID_T0, 0, Pos_T0 );
	double beamtof, momout;
	double z_pos = Pos_T0.Z();;
	ELossTools::CalcElossBeamTGeo( bpctrack->GetPosatZ(z_pos), vtx_react,
				       L3_beambf.Vect().Mag(), kpMass, momout, beamtof );
	// L3_beam.SetVectM( momout*L3_beambf.Vect().Unit(), kpMass ); // not need energy-loss correction [20180329]
	double ntof = ncdhhit->ctmean()-ctmT0-beamtof;
	double nlen = (Pos_CDH-vtx_react).Mag();
	//std::cerr<<" nlen = "<<(Pos_CDH-vtx_react).Mag()<<", "<<(Pos_CDH-vtx_p).Mag()<<std::endl;
	beta = nlen/ntof/(Const*100);
	double tmp_mom = beta<1 ? nMass*beta/sqrt(1-beta*beta) : 0;
	std::cerr<<"$$$ beta = "<<beta<<" mom_n = "<<tmp_mom<<std::endl; //" "<<1/sqrt(1+nMass*nMass)<<std::endl;

	if( beta<1 ){
	  Tools::Fill2D( Form("CDH_ADC_TDC_n"), ncdhhit->ctmean(), ncdhhit->emean() );
	}
	
	//** reconstructoin of missing neutorn **//
	TVector3 P_pi; // Momentum(pi)
	TVector3 P_n;  // Momentum(n)
      
	TLorentzVector L_pi;  // 4-Momentum(pi)
	TLorentzVector L_n;   // 4-Momentum(n)
	TLorentzVector L_mpi; // 4-Momentum(pi_miss)

	double dca_pi  = (vtx_b-vtx_p).Mag(); // DCA(beam-pi)
	if( !track_pi->GetMomentum( vtx_p, P_pi, true, true ) ){
	  std::cerr<<" !!! failure in momentum calculation [GetMomentum()] !!! "<<std::endl;
	}
	P_n = tmp_mom*(Pos_CDH-vtx_react).Unit();

	L_pi.SetVectM( P_pi, piMass );
	L_n.SetVectM(  P_n,   nMass );

	double mm_mass = (L3_target+L3_beam-L_pi-L_n).M();
	TVector3 P_mpi = (L3_target+L3_beam-L_pi-L_n).Vect();
	L_mpi.SetVectM( P_mpi, piMass );

	//++++++++++++++++++++//
	double ff = GeomTools::GetID(vtx_react)==CID_Fiducial ? 1:0;
	std::cerr<<"  E, sqrt(s )    = "<<(L3_target+L3_beam).E()<<" , "<<(L3_target+L3_beam).M()<<std::endl;
	std::cerr<<"  fiducial flag  = "<<ff<<std::endl;
	std::cerr<<"  detected pi: E = "<<L_pi.E()<<" | mom = "<<L_pi.P()<<" | "<<L_pi.Px()<<" "<<L_pi.Py()<<" "<<L_pi.Pz()<<std::endl;
	std::cerr<<"  detected n:  E = "<<L_n.E()<<" | mom = "<<L_n.P()<<" | "<<L_n.Px()<<" "<<L_n.Py()<<" "<<L_n.Pz()<<std::endl;
	std::cerr<<"          1/beta = "<<1/beta<<" , dE = "<<ncdhhit->emean()<<std::endl;
	std::cerr<<"  missing      E = "<<(L3_target+L3_beam).E()-L_pi.E()-L_n.E()<<" | mom = "<<L_mpi.P()<<" | "<<L_mpi.Px()<<" "<<L_mpi.Py()<<" "<<L_mpi.Pz()<<std::endl;
	std::cerr<<"  missing   mass = "<<mm_mass<<std::endl;
	//++++++++++++++++++++//

	TVector3 boost = (L3_target+L3_beam).BoostVector();
	TLorentzVector L_mpi_CM = L_mpi;
	TLorentzVector L3_beam_CM = L3_beam;
	L_mpi_CM.Boost(-boost);
	L3_beam_CM.Boost(-boost);
	double cos_pi = L_mpi_CM.Vect().Dot(L3_beam_CM.Vect())/(L_mpi_CM.Vect().Mag()*L3_beam_CM.Vect().Mag());
	std::cerr<<"  missing mom | cos_CM = "<<cos_pi<<std::endl;

	
	//** + + + + + + + + + + + + + **//
	//**  fill histograms & tree   **//
	//** + + + + + + + + + + + + + **//
	
	const double beta_MAX = 0.728786; // p = 1.0 GeV/c for neutron & 1/beta = 1.372
	//const double dE_MIN = 5.0; // 8.0MeVee * 3cm / 5cm;
	const double dE_MIN = 0.0;
	
	const double pi_MIN = 0.0; // temp [20180711]
	const double pi_MAX = 0.3; // temp [20180711]

	double Sigma_MIN = 0;
	double Sigma_MAX = 0;
	int PDG[5];
	if ( pip_ID.size()==1 ){
	  nEvent_pip++;
	  charge_pi = 0;
	  Sigma_MIN = 1.18;
	  Sigma_MAX = 1.20;
	  for( int i=0; i<5; i++ ) PDG[i] = PDG1[i];
	}
	else if ( pim_ID.size()==1 ){
	  nEvent_pim++;
	  charge_pi = 1;
	  Sigma_MIN = 1.19;
	  Sigma_MAX = 1.21;
	  for( int i=0; i<5; i++ ) PDG[i] = PDG2[i];
	}
	kf_flag = -1;

	if( 0<beta && beta<beta_MAX ){
	  nEvent_n++;
	  if      ( pip_ID.size()==1 ) nEvent_pipn++;
	  else if ( pim_ID.size()==1 ) nEvent_pimn++;
	}

	if( pi_MIN<mm_mass && mm_mass<pi_MAX ){ // missing pi selection
	  if( Sigma_MIN<(L_n+L_pi).M() && (L_n+L_pi).M()<Sigma_MAX ){ // Sigma selection
	    nReconst_piS1++;
	  }
	}

	Tools::Fill2D( Form("dE_betainv"), 1/beta, ncdhhit->emean() );
	Tools::Fill2D( Form("MMom_MMass"), mm_mass, P_mpi.Mag() );
	
	if( GeomTools::GetID(vtx_react)==CID_Fiducial ){
	  Tools::Fill2D( Form("dE_betainv_fiducial"), 1/beta, ncdhhit->emean() );
	  Tools::Fill2D( Form("MMom_MMass_fiducial"), mm_mass, P_mpi.Mag() );
  
	  if(  beta<beta_MAX ){
	    Tools::Fill2D( Form("dE_betainv_fiducial_beta"), 1/beta, ncdhhit->emean() );
	    Tools::Fill2D( Form("MMom_MMass_fiducial_beta"), mm_mass, P_mpi.Mag() );
	    
	    if( dE_MIN<ncdhhit->emean() ){
	      Tools::Fill2D( Form("dE_betainv_fiducial_beta_dE"), 1/beta, ncdhhit->emean() );
	      Tools::Fill2D( Form("MMom_MMass_fiducial_beta_dE"), mm_mass, P_mpi.Mag() );
	      Tools::Fill2D( Form("Cospi_IMnpi"), (L_n+L_pi).M(), cos_pi );

	      // ********************** //	      
	      // *** pi Sigma mode *** //
	      // ********************** //
	      {
		if( pi_MIN<mm_mass && mm_mass<pi_MAX ){ // missing pi selection
		  Tools::Fill2D( Form("dE_betainv_fiducial_beta_dE_pi"), 1/beta, ncdhhit->emean() );
		  Tools::Fill2D( Form("MMom_MMass_fiducial_beta_dE_pi"), mm_mass, P_mpi.Mag() );
		  Tools::Fill2D( Form("Cospi_IMnpi_pi"), (L_n+L_pi).M(), cos_pi );

		  if( Sigma_MIN<(L_n+L_pi).M() && (L_n+L_pi).M()<Sigma_MAX ){ // Sigma selection
		    Tools::Fill1D( Form("DCA_pi"), dca_pi );
		    nReconst_piS2++;
		  }
		}

		nReconst_pipin++;

		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% //
		// %%% Kinematical Fit using KinFitter %%% //
		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% //
		//--- set TLorentzVector for MC study---//
		// beam_K(K+), Sigma+/-, missing pi-/+, n from S, pi+/- from S 
		//  = TLorentzVector L3_beam, (L_n+L_pi), L_mpi, L_n, L_pi
		mcmom_beam = TL_gene[0];
		mcmom_pi   = TL_gene[4];
		mcmom_mpi  = TL_gene[2];
		mcmom_n    = TL_gene[3];

		//--- set TLorentzVector ---//
		// beam_K(K+), Sigma+/-, missing pi-/+, n from S, pi+/- from S 
		//  = TLorentzVector L3_beam, (L_n+L_pi), L_mpi, L_n, L_pi
		TLorentzVector TL_meas[5]; // measured
		TL_meas[0] = L3_beam;
		TL_meas[1] = (L_n+L_pi);
		TL_meas[2] = L_mpi;
		TL_meas[3] = L_n;
		TL_meas[4] = L_pi;

		//for( int i=0; i<5; i++ ){
		//TL_meas[i].Print();
		//}

		TLorentzVector TL_kfit[5]; // kinematical fitted
		// L3_target is defined as (0, 0, 0, M_3He)
		TVector3 TV_target = L3_target.Vect();
		TVector3 TV_meas[5];
		for( int i=0; i<5; i++ ){
		  TV_meas[i] = TL_meas[i].Vect();
		}
		
		//--- KinFitter :: initialization ---//
		//  = TLorentzVector L3_beam, (L_n+L_pi), L_mpi, L_n, L_pi
		//*** definition of fit particles in cartesian coordinates ***//
		TString str_particle[5] = {"L_beam", "L_S", "L_mpi", "L_n", "L_pi"};
		TFitParticlePxPyPz ParticleTgt = TFitParticlePxPyPz("target", "target", &TV_target,
								    pdg->GetParticle("proton")->Mass(), covZero);
		TFitParticlePxPyPz Particle[5];
		for( int i=0; i<5; i++ ){
		  Particle[i] = TFitParticlePxPyPz(str_particle[i], str_particle[i], &TV_meas[i],
						   pdg->GetParticle(PDG[i])->Mass(), covParticle[i]);
		}
		//*** definition of constraints ***//
		// constraint :: mass of Sigma
		TFitConstraintM ConstMS = TFitConstraintM("M_S", "M_S", 0, 0, pdg->GetParticle(PDG[1])->Mass());
		ConstMS.addParticles1(&Particle[3], &Particle[4]);

		// constraint :: 4-momentum conservation
		TFitConstraintEp ConstEp[4];
		TString str_constEp[4]  = {"Px", "Py", "Pz", "E"};
		for( int i=0; i<4; i++ ){
		  ConstEp[i] = TFitConstraintEp(str_constEp[i], str_constEp[i], 0, TFitConstraintEp::component(i), 0);
		  ConstEp[i].addParticles1(&ParticleTgt, &Particle[0]);
		  ConstEp[i].addParticles2(&Particle[2], &Particle[3], &Particle[4]);
		}

		//--- KinFitter :: execution ---//
		//*** definition of the fitter ***//
		TKinFitter kinfitter;
		// add measured particles
		kinfitter.addMeasParticles(&Particle[0], &Particle[3], &Particle[4]); // K-, n, pi
		kinfitter.addUnmeasParticles(&Particle[2]); // missing-pi
		// add constraints
		kinfitter.addConstraint(&ConstMS); // mass of Sigma
		for( int i=0; i<4; i++ ){
		  kinfitter.addConstraint(&ConstEp[i]); // 4-momentum conservation
		}
		//*** perform the fit ***//
		kinfitter.setMaxNbIter(50);       // max number of iterations
		kinfitter.setMaxDeltaS(5e-5);     // max delta chi2
		kinfitter.setMaxF(1e-4);          // max sum of constraints
		kinfitter.setVerbosity(KFDEBUG);  // verbosity level
		kinfitter.fit();
		//*** copy fit results ***//
		for( int i=0; i<5; i++ ){
		  TL_kfit[i] = (*Particle[i].getCurr4Vec());
		}
		TL_kfit[1] = TL_kfit[3]+TL_kfit[4];
              
		Tools::Fill1D( Form("KFchi2"), kinfitter.getS()/kinfitter.getNDF() );

		std::cerr<<"pi S : status = "<<kinfitter.getStatus()<<", chi2/NDF = "<<kinfitter.getS()<<"/"<<kinfitter.getNDF()<<std::endl;
		//** fill tree **//
		kfmom_beam   = TL_kfit[0];
		kfmom_pi     = TL_kfit[4];
		kfmom_mpi    = TL_kfit[2];
		kfmom_n      = TL_kfit[3];
		kf_chi2      = kinfitter.getS();
		kf_NDF       = kinfitter.getNDF();
		kf_status    = kinfitter.getStatus();
		kf_pvalue    = ROOT::Math::chisquared_cdf_c(kinfitter.getS(), kinfitter.getNDF());
		kf_flag       = reactionID;

		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% //
		// %%% Kinematical Fit using KinFitter %%% //
		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% //

#if 1
		//--- for the covariance matrix evaluation ---//
		if( flagG4Decay ){
		  if( pi_MIN<mm_mass && mm_mass<pi_MAX ){ // missing pi selection
		    if( Sigma_MIN<(L_n+L_pi).M() && (L_n+L_pi).M()<Sigma_MAX ){ // Sigma selection
		      for( int i=0; i<5; i++ ){
			for( int j=0; j<4; j++ ){
			  double val = (TL_meas[i][j] - TL_gene[i][j]);
			  Tools::Fill1D(Form("cov_%d_%d_%d", i, j, j), val);
			  //std::cerr<<" cov "<<i<<" , "<<j<<" = "<<TL_meas[i][j]<<" - "<<TL_gene[i][j]
			  //<<" = "<< (TL_meas[i][j] - TL_gene[i][j])<<std::endl;
			}
		      } // for( int i=0; i<5; i++ ){
		    }
		  }
		}
#endif

	      }
	      
	    } // if( dE_MIN<ncdhhit->emean() ){
	  } // if(  beta<beta_MAX ){

	  //** fill tree **//
	  mom_beam   = L3_beam;   // 4-momentum(beam)
	  mom_target = L3_target; // 4-momentum(target)
	  mom_pi  = L_pi;         // 4-momentum(detected pi)
	  mom_mpi = L_mpi;        // 4-momentum(missing pi)
	  mom_n   = L_n;          // 4-momentum(neutron)
	  dE = ncdhhit->emean();
	  // beta is already filled
	  vtx_reaction = vtx_react; // vertex(reaction)
	  run_num   = confMan->GetRunNumber(); // run number
	  event_num = ev;     // event number
	  block_num = 0;      // block number (temp)
  
	  std::cout<<"%%% pipin event: Event_Number, Block_Event_Number, CDC_Event_Number = "
		   <<ev<<" , "<<" ---, "<<ev_cdc<<std::endl;
	  outfile2->cd();
	  pipinTree->Fill();
	  outfile->cd();
	  nFill_pipin++;
	  //** fill tree **//

	  if( -1<kf_flag && kf_status==0 && 0.01<kf_pvalue ){
	    nReconst_piS3++;
	    if( 2<dE ) nReconst_piS4++;
	  }
	  
	} // if( GeomTools::GetID(vtx_react)==CID_Fiducial ){	
      } // if( !nCDC ){
    }
    else{
      nAbort_pi++;
    }
    
    nAbort_end++;
    delete detData2;
    
  } // for( int ev=0; ev<exen; ev++ ){
  
  cout<<"===== Lambda p n reconstruction in MC END ====="<<endl;
  cout<<" nEvent       = "<<exen<<endl;
  cout<<" nEvent_pip   = "<<nEvent_pip<<endl;
  cout<<" nEvent_pim   = "<<nEvent_pim<<endl;
  cout<<" nEvent_n     = "<<nEvent_n<<endl;
  cout<<" nEvent_pipn  = "<<nEvent_pipn<<endl;
  cout<<" nEvent_pimn  = "<<nEvent_pimn<<endl;
  cout<<"***********************************************"<<endl;
  cout<<" nG4Decay       = "<<nG4Decay<<endl;
  cout<<" nG4Event_piS   = "<<nG4Event_piS<<endl;
  cout<<" nReconst_piS1  = "<<nReconst_piS1<<endl;
  cout<<" nReconst_piS2  = "<<nReconst_piS2<<endl;
  cout<<" nReconst_pipin = "<<nReconst_pipin<<endl;
  cout<<" nReconst_piS3  = "<<nReconst_piS3<<endl;
  cout<<" nReconst_piS4  = "<<nReconst_piS4<<endl;
  cout<<"***********************************************"<<endl;
  cout<<" AllGoodTrack = "<<AllGoodTrack<<endl;
  cout<<" nTrack       = "<<nTrack<<endl;
  cout<<" nTrack_PID   = "<<nTrack_PID<<endl;
  cout<<"***********************************************"<<endl;
  cout<<" nAbort_nGoodTrack  = "<<nAbort_nGoodTrack<<endl;
  cout<<" nAbort_nCDH        = "<<nAbort_nCDH<<endl;
  cout<<" nAbort_nT0         = "<<nAbort_nT0<<endl;
  cout<<" nAbort_nbpc        = "<<nAbort_nbpc<<endl;
  cout<<" nAbort_bpctrack    = "<<nAbort_bpctrack<<endl;
  cout<<" nAbort_nblc2       = "<<nAbort_nblc2<<endl;
  cout<<" nAbort_fblc2bpc    = "<<nAbort_fblc2bpc<<endl;
  cout<<" nAbort_flagbmom    = "<<nAbort_flagbmom<<endl;
  cout<<" nAbort_ftarget     = "<<nAbort_ftarget<<endl;
  cout<<" nAbort_CDHiso      = "<<nAbort_CDHiso<<std::endl;
  cout<<" nAbort_pi          = "<<nAbort_pi<<std::endl;
  cout<<" nAbort_end         = "<<nAbort_end<<std::endl;
  cout<<"***********************************************"<<endl;
  cout<<" nTrack_CDHshare = "<<nTrack_CDHshare<<endl;
  cout<<"*** # of pi+ pi- n events = "<<nFill_pipin<<" ***"<<std::endl;
  cout<<"==============================================="<<endl;

  outfile->Write();
  outfile->Close();

  outfile2->Write();
  outfile2->Close();

  simfile->Close();
  cdcfile->Close();

  delete pdg;

  delete confMan;
  delete simMan;

  delete evHeaderMC;
  delete detData;
  delete reacData;
  delete mcData;

  delete header;
  delete cdsMan;
  delete blMan;
  delete bltrackMan;
  delete cdstrackMan;

  delete simfile;
  delete cdcfile;
  delete outfile;

  return 0;
}
